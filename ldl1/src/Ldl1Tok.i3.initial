
(* INTERFACE Ldl1Tok, Ldl tokens, mechanically generated by LdlSemantics. 
     Generated on:  2013/03/25 15:28:12 GMT
     Language    Scheutz Language Definition Language Ldl1
     Version     1.0.0.0
     Date        2013/03/25 15:28:10 GMT
     Fingerprint 2baa8dbc27792518
*) 

INTERFACE Ldl1Tok 

; IMPORT LbeStd  

(* Names for string tokens: *) 
; CONST RwVERT_Tok = 33 (* = "VERT" *) 
; CONST RwVARTERM_Tok = 34 (* = "VARTERM" *) 
; CONST RwSTART_Tok = 35 (* = "START" *) 
; CONST RwRIGHT_Tok = 36 (* = "RIGHT" *) 
; CONST RwPRESENT_Tok = 37 (* = "PRESENT" *) 
; CONST RwPREC_Tok = 38 (* = "PREC" *) 
; CONST RwPLURAL_Tok = 39 (* = "PLURAL" *) 
; CONST RwNONPLURAL_Tok = 40 (* = "NONPLURAL" *) 
; CONST RwMEMBER_Tok = 41 (* = "MEMBER" *) 
; CONST RwLDL_Tok = 42 (* = "LDL" *) 
; CONST RwLEFT_Tok = 43 (* = "LEFT" *) 
; CONST RwNONEMPTY_Tok = 44 (* = "NONEMPTY" *) 
; CONST RwNONE_Tok = 45 (* = "NONE" *) 
; CONST RwHORIZ_Tok = 46 (* = "HORIZ" *) 
; CONST RwFILL_Tok = 47 (* = "FILL" *) 
; CONST RwEND_Tok = 48 (* = "END" *) 
; CONST RwBUILD_Tok = 49 (* = "BUILD" *) 
; CONST RwCASE_Tok = 50 (* = "CASE" *) 
; CONST RwOF_Tok = 51 (* = "OF" *) 
; CONST RwELSE_Tok = 52 (* = "ELSE" *) 
; CONST RwABSENT_Tok = 53 (* = "ABSENT" *) 
; CONST RwEMPTY_Tok = 54 (* = "EMPTY" *) 
; CONST RwINDENT_Tok = 55 (* = "INDENT" *) 
; CONST RwINLINE_Tok = 56 (* = "INLINE" *) 
; CONST RwNIL_Tok = 57 (* = "NIL" *) 
; CONST RwVERSION_Tok = 58 (* = "VERSION" *) 
; CONST RwSUFFIXES_Tok = 59 (* = "SUFFIXES" *) 
; CONST RwNOPARSE_Tok = 60 (* = "NOPARSE" *) 
; CONST CloseParen_Tok = 61 (* = ")" *) 
; CONST OpenParen_Tok = 62 (* = "(" *) 
; CONST At_Tok = 63 (* = "@" *) 
; CONST Bang_Tok = 64 (* = "!" *) 
; CONST Dollar_Tok = 65 (* = "$" *) 
; CONST Circumflex_Tok = 66 (* = "^" *) 
; CONST Plus_Tok = 67 (* = "+" *) 
; CONST Minus_Tok = 68 (* = "-" *) 
; CONST Underscore_Tok = 69 (* = "_" *) 
; CONST Arrow_Tok = 70 (* = "->" *) 
; CONST ArrowStar_Tok = 71 (* = "->*" *) 
; CONST DoubleStroke_Tok = 72 (* = "||" *) 
; CONST TripleStroke_Tok = 73 (* = "|||" *) 
; CONST Stroke_Tok = 74 (* = "|" *) 
; CONST Equals_Tok = 75 (* = "=" *) 
; CONST CloseBrace_Tok = 76 (* = "}" *) 
; CONST OpenBrace_Tok = 77 (* = "{" *) 
; CONST CloseBracket_Tok = 78 (* = "]" *) 
; CONST OpenBracket_Tok = 79 (* = "[" *) 
; CONST Semicolon_Tok = 80 (* = ";" *) 
; CONST ColonColonEquals_Tok = 81 (* = "::=" *) 
; CONST ColonColonEqualsStar_Tok = 82 (* = "::=*" *) 
; CONST ColonColonEqualsPlus_Tok = 83 (* = "::=+" *) 
; CONST ColonColonEqualsPlusPlus_Tok = 84 (* = "::=++" *) 
; CONST ColonColon_Tok = 85 (* = "::" *) 
; CONST ColonColonPlus_Tok = 86 (* = "::+" *) 
; CONST ColonColonStar_Tok = 87 (* = "::*" *) 
; CONST Dot_Tok = 88 (* = "." *) 
; CONST Comma_Tok = 89 (* = "," *) 
; CONST Colon_Tok = 90 (* = ":" *) 

(* Variable terminal tokens: *) 
; CONST Ident = 91
; CONST String = 92
; CONST Integer = 93

(* Tokens for ModTok nodes for variable terminals: *) 
(* «Ident__ModTok» = 94 *)
(* «String__ModTok» = 95 *)
(* «Integer__ModTok» = 96 *)

(* Abstract Plus Nodes: *) 
; CONST IntPlusList = 97
; CONST StringPlusList = 98
; CONST IdentPlusList = 99
; CONST Alternation = 100
; CONST CsAtomPlusList = 101
; CONST FsCondFmtList = 102

(* Abstract Star Nodes: *) 
; CONST RuleList = 103
; CONST AsChildList = 104
; CONST Concatenation = 105
; CONST PrecLevels = 106
; CONST FsFixedChildList = 107
; CONST FormatterList = 108

(* Abstract Fixed Nodes: *) 
; CONST LanguageDefinition = 109
; CONST StartRule = 110
; CONST AsVarTermRule = 111
; CONST AsFixedRule = 112
; CONST AsReqdChild = 113
; CONST AsOptChild = 114
; CONST AsStarRule = 115
; CONST AsPlusRule = 116
; CONST AsClassRule = 117
; CONST AsCsClassRule = 118
; CONST CsAltRule = 119
; CONST CsFixedRule = 120
; CONST CsStarRule = 121
; CONST CsPlusRule = 122
; CONST CsPluralRule = 123
; CONST CsStarTrailRule = 124
; CONST CsPlusTrailRule = 125
; CONST CsPluralTrailRule = 126
; CONST Nil = 127
; CONST PrecRule = 128
; CONST PrecLevelNone = 129
; CONST PrecLevelLeft = 130
; CONST PrecLevelRight = 131
; CONST FsFixedDefaultRule = 132
; CONST FsFixedHorizRule = 133
; CONST FsFixedVertRule = 134
; CONST FsFixedFillRule = 135
; CONST FsInlineRule = 136
; CONST LineBreak = 137
; CONST BolIndenter = 138
; CONST ParentIndenter = 139
; CONST PosIndenter = 140
; CONST BolPlusIndenter = 141
; CONST ParentPlusIndenter = 142
; CONST PosPlusIndenter = 143
; CONST BolMinusIndenter = 144
; CONST ParentMinusIndenter = 145
; CONST PosMinusIndenter = 146
; CONST FsDefaultSubtree = 147
; CONST FsHorizSubtree = 148
; CONST FsVertSubtree = 149
; CONST FsFillSubtree = 150
; CONST FsChildPlain = 151
; CONST DontCare = 152
; CONST FsNoParse = 153
; CONST FsCondAbsent = 154
; CONST FsCondPresent = 155
; CONST FsCondEmpty = 156
; CONST FsCondNonempty = 157
; CONST FsCondPlural = 158
; CONST FsCondNonplural = 159
; CONST FsCondElse = 160
; CONST FsCondMember = 161
; CONST FsChildCase = 162
; CONST FsListDefaultRule = 163
; CONST FsListHorizRule = 164
; CONST FsListVertRule = 165
; CONST FsListFillRule = 166
; CONST FsListTrailDefaultRule = 167
; CONST FsListTrailHorizRule = 168
; CONST FsListTrailVertRule = 169
; CONST FsListTrailFillRule = 170

(* Sublist Tokens: *) 
(* «IntPlusList__Sub» = 171, Sublist nonterminal for IntPlusList *) 
(* «StringPlusList__Sub» = 172, Sublist nonterminal for StringPlusList *) 
(* «IdentPlusList__Sub» = 173, Sublist nonterminal for IdentPlusList *) 
(* «Alternation__Sub» = 174, Sublist nonterminal for Alternation *) 
(* «CsAtomPlusList__Sub» = 175, Sublist nonterminal for CsAtomPlusList *) 
(* «FsCondFmtList__Sub» = 176, Sublist nonterminal for FsCondFmtList *) 
(* «RuleList__Sub» = 177, Sublist nonterminal for RuleList *) 
(* «AsChildList__Sub» = 178, Sublist nonterminal for AsChildList *) 
(* «Concatenation__Sub» = 179, Sublist nonterminal for Concatenation *) 
(* «PrecLevels__Sub» = 180, Sublist nonterminal for PrecLevels *) 
(* «FsFixedChildList__Sub» = 181, Sublist nonterminal for FsFixedChildList *) 
(* «FormatterList__Sub» = 182, Sublist nonterminal for FormatterList *) 

(* List Cardinality Tokens: *) 
(* «IntPlusList»__1 = 183 *) 
(* «IntPlusList»__2 = 184 *) 
(* «RuleList»__0 = 185 *) 
(* «RuleList»__1 = 186 *) 
(* «RuleList»__2 = 187 *) 
(* «StringPlusList»__1 = 188 *) 
(* «StringPlusList»__2 = 189 *) 
(* «AsChildList»__0 = 190 *) 
(* «AsChildList»__1 = 191 *) 
(* «AsChildList»__2 = 192 *) 
(* «IdentPlusList»__1 = 193 *) 
(* «IdentPlusList»__2 = 194 *) 
(* «Alternation»__1 = 195 *) 
(* «Alternation»__2 = 196 *) 
(* «Concatenation»__0 = 197 *) 
(* «Concatenation»__1 = 198 *) 
(* «Concatenation»__2 = 199 *) 
(* «CsAtomPlusList»__1 = 200 *) 
(* «CsAtomPlusList»__2 = 201 *) 
(* «PrecLevels»__0 = 202 *) 
(* «PrecLevels»__1 = 203 *) 
(* «PrecLevels»__2 = 204 *) 
(* «FsFixedChildList»__0 = 205 *) 
(* «FsFixedChildList»__1 = 206 *) 
(* «FsFixedChildList»__2 = 207 *) 
(* «FormatterList»__0 = 208 *) 
(* «FormatterList»__1 = 209 *) 
(* «FormatterList»__2 = 210 *) 
(* «FsCondFmtList»__1 = 211 *) 
(* «FsCondFmtList»__2 = 212 *) 

(* Partial List Tokens: *) 
(* «IntPlusList__Part» = 213, Partial list nonterminal for IntPlusList *) 
(* «StringPlusList__Part» = 214, Partial list nonterminal for StringPlusList *) 
(* «IdentPlusList__Part» = 215, Partial list nonterminal for IdentPlusList *) 
(* «Alternation__Part» = 216, Partial list nonterminal for Alternation *) 
(* «CsAtomPlusList__Part» = 217, Partial list nonterminal for CsAtomPlusList *) 
(* «FsCondFmtList__Part» = 218, Partial list nonterminal for FsCondFmtList *) 
(* «RuleList__Part» = 219, Partial list nonterminal for RuleList *) 
(* «AsChildList__Part» = 220, Partial list nonterminal for AsChildList *) 
(* «Concatenation__Part» = 221, Partial list nonterminal for Concatenation *) 
(* «PrecLevels__Part» = 222, Partial list nonterminal for PrecLevels *) 
(* «FsFixedChildList__Part» = 223, Partial list nonterminal for FsFixedChildList *) 
(* «FormatterList__Part» = 224, Partial list nonterminal for FormatterList *) 

(* Abstract-only Classes: *) 

(* Classes that are also Concrete alternations: *) 
; CONST RwVERT = 225 (* Name for "VERT" *) 
; CONST RwVARTERM = 226 (* Name for "VARTERM" *) 
; CONST RwSTART = 227 (* Name for "START" *) 
; CONST RwRIGHT = 228 (* Name for "RIGHT" *) 
; CONST RwPRESENT = 229 (* Name for "PRESENT" *) 
; CONST RwPREC = 230 (* Name for "PREC" *) 
; CONST RwPLURAL = 231 (* Name for "PLURAL" *) 
; CONST RwNONPLURAL = 232 (* Name for "NONPLURAL" *) 
; CONST RwMEMBER = 233 (* Name for "MEMBER" *) 
; CONST RwLDL = 234 (* Name for "LDL" *) 
; CONST RwLEFT = 235 (* Name for "LEFT" *) 
; CONST RwNONEMPTY = 236 (* Name for "NONEMPTY" *) 
; CONST RwNONE = 237 (* Name for "NONE" *) 
; CONST RwHORIZ = 238 (* Name for "HORIZ" *) 
; CONST RwFILL = 239 (* Name for "FILL" *) 
; CONST RwEND = 240 (* Name for "END" *) 
; CONST RwBUILD = 241 (* Name for "BUILD" *) 
; CONST RwCASE = 242 (* Name for "CASE" *) 
; CONST RwOF = 243 (* Name for "OF" *) 
; CONST RwELSE = 244 (* Name for "ELSE" *) 
; CONST RwABSENT = 245 (* Name for "ABSENT" *) 
; CONST RwEMPTY = 246 (* Name for "EMPTY" *) 
; CONST RwINDENT = 247 (* Name for "INDENT" *) 
; CONST RwINLINE = 248 (* Name for "INLINE" *) 
; CONST RwNIL = 249 (* Name for "NIL" *) 
; CONST RwVERSION = 250 (* Name for "VERSION" *) 
; CONST RwSUFFIXES = 251 (* Name for "SUFFIXES" *) 
; CONST RwNOPARSE = 252 (* Name for "NOPARSE" *) 
; CONST CloseParen = 253 (* Name for ")" *) 
; CONST OpenParen = 254 (* Name for "(" *) 
; CONST At = 255 (* Name for "@" *) 
; CONST Bang = 256 (* Name for "!" *) 
; CONST Dollar = 257 (* Name for "$" *) 
; CONST Circumflex = 258 (* Name for "^" *) 
; CONST Plus = 259 (* Name for "+" *) 
; CONST Minus = 260 (* Name for "-" *) 
; CONST Underscore = 261 (* Name for "_" *) 
; CONST Arrow = 262 (* Name for "->" *) 
; CONST ArrowStar = 263 (* Name for "->*" *) 
; CONST DoubleStroke = 264 (* Name for "||" *) 
; CONST TripleStroke = 265 (* Name for "|||" *) 
; CONST Stroke = 266 (* Name for "|" *) 
; CONST Equals = 267 (* Name for "=" *) 
; CONST CloseBrace = 268 (* Name for "}" *) 
; CONST OpenBrace = 269 (* Name for "{" *) 
; CONST CloseBracket = 270 (* Name for "]" *) 
; CONST OpenBracket = 271 (* Name for "[" *) 
; CONST Semicolon = 272 (* Name for ";" *) 
; CONST ColonColonEquals = 273 (* Name for "::=" *) 
; CONST ColonColonEqualsStar = 274 (* Name for "::=*" *) 
; CONST ColonColonEqualsPlus = 275 (* Name for "::=+" *) 
; CONST ColonColonEqualsPlusPlus = 276 (* Name for "::=++" *) 
; CONST ColonColon = 277 (* Name for "::" *) 
; CONST ColonColonPlus = 278 (* Name for "::+" *) 
; CONST ColonColonStar = 279 (* Name for "::*" *) 
; CONST Dot = 280 (* Name for "." *) 
; CONST Comma = 281 (* Name for "," *) 
; CONST Colon = 282 (* Name for ":" *) 
; CONST Rule = 283
; CONST AsRule = 284
; CONST AsChild = 285
; CONST AsClass = 286
; CONST AsListRule = 287
; CONST CsRule = 288
; CONST CsChild = 289
; CONST CsReqdChild = 290
; CONST CsOptChild = 291
; CONST CsListRule = 292
; CONST CsAtom = 293
; CONST PrecLevel = 294
; CONST FsRule = 295
; CONST FsFixedRule = 296
; CONST FsFixedChild = 297
; CONST Formatter = 298
; CONST Indenter = 299
; CONST FsSubtree = 300
; CONST FsSubtreeChild = 301
; CONST FsChild = 302
; CONST IdentOrDontCare = 303
; CONST FsClass = 304
; CONST FsCondFmt = 305
; CONST FsListRule = 306

(* Concrete Alternation Tokens: *) 
; CONST CsChildCs = 307

(* Concrete Plus Tokens: *) 

(* Concrete Plural Tokens: *) 

(* Concrete Star Tokens: *) 

(* Concrete Fixed Tokens: *) 
; CONST CsOptChildCs = 308

(* Limits: *) 
; CONST MinTok = 33
; CONST MaxTok = 308

; PROCEDURE ToText ( Tok : LbeStd . TokTyp ) : TEXT 

; END Ldl1Tok . 

