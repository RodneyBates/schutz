
(* -----------------------------------------------------------------------1- *)
(* This file is part of the Scheutz semantic editor.                         *)
(* Copyright 1988..2007, Rodney M. Bates.                                    *)
(* rodney.bates@wichita.edu                                                  *)
(* Licensed under the Gnu Public License, version 2 or later.                *)
(* -----------------------------------------------------------------------2- *)

MODULE Ldl1MakeEst

(* This module was mechanically generated by GenConstEst. 
     Generated on:  2004/06/07 18:55:48 GMT
     Language    Scheutz Language Definition Language Ldl1
     Version     1.0.0.0
     Date        2004/06/07 18:55:47 GMT
     Fingerprint 2baa8dbc27792518
*) 

; IMPORT LbeStd 
; IMPORT EstHs 
; IMPORT EstBuild 
; IMPORT ModHs 
; IMPORT SharedStrings 
; IMPORT Ldl0Tok AS LdlTok 
; FROM Assertions IMPORT AssertionFailure 

(* VISIBLE: *) 
; PROCEDURE Root ( Lang : LbeStd . LangTyp := LbeStd . LangNull ) 
  : LbeStd . EstRootTyp 
  RAISES { AssertionFailure } 

  = CONST Dummy = 0 (* For ease of generation. *) 

  ; PROCEDURE BuildNode12_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode12_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode12_Alternation 

  ; PROCEDURE BuildNode9_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode9_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode12_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwVERT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode9_AsClassRule 

  ; PROCEDURE BuildNode16_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode16_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode16_Alternation 

  ; PROCEDURE BuildNode14_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode14_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode16_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwVARTERM"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode14_AsClassRule 

  ; PROCEDURE BuildNode20_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode20_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode20_Alternation 

  ; PROCEDURE BuildNode18_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode18_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode20_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwSTART"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode18_AsClassRule 

  ; PROCEDURE BuildNode24_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode24_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode24_Alternation 

  ; PROCEDURE BuildNode22_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode22_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode24_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwRIGHT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode22_AsClassRule 

  ; PROCEDURE BuildNode28_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode28_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode28_Alternation 

  ; PROCEDURE BuildNode26_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode26_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode28_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPRESENT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode26_AsClassRule 

  ; PROCEDURE BuildNode32_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode32_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode32_Alternation 

  ; PROCEDURE BuildNode30_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode30_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode32_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPREC"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode30_AsClassRule 

  ; PROCEDURE BuildNode36_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode36_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode36_Alternation 

  ; PROCEDURE BuildNode34_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode34_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode36_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPLURAL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode34_AsClassRule 

  ; PROCEDURE BuildNode40_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode40_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONPLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode40_Alternation 

  ; PROCEDURE BuildNode38_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode38_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode40_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNONPLURAL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode38_AsClassRule 

  ; PROCEDURE BuildNode44_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode44_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode44_Alternation 

  ; PROCEDURE BuildNode42_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode42_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode44_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwMEMBER"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode42_AsClassRule 

  ; PROCEDURE BuildNode48_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode48_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode48_Alternation 

  ; PROCEDURE BuildNode46_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode46_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode48_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwLDL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode46_AsClassRule 

  ; PROCEDURE BuildNode52_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode52_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode52_Alternation 

  ; PROCEDURE BuildNode50_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode50_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode52_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwLEFT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode50_AsClassRule 

  ; PROCEDURE BuildNode56_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode56_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode56_Alternation 

  ; PROCEDURE BuildNode54_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode54_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode56_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNONEMPTY"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode54_AsClassRule 

  ; PROCEDURE BuildNode60_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode60_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode60_Alternation 

  ; PROCEDURE BuildNode58_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode58_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode60_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNONE"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode58_AsClassRule 

  ; PROCEDURE BuildNode64_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode64_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode64_Alternation 

  ; PROCEDURE BuildNode62_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode62_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode64_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwHORIZ"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode62_AsClassRule 

  ; PROCEDURE BuildNode68_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode68_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode68_Alternation 

  ; PROCEDURE BuildNode66_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode66_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode68_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwFILL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode66_AsClassRule 

  ; PROCEDURE BuildNode72_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode72_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode72_Alternation 

  ; PROCEDURE BuildNode70_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode70_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode72_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwEND"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode70_AsClassRule 

  ; PROCEDURE BuildNode76_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode76_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode76_Alternation 

  ; PROCEDURE BuildNode74_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode74_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode76_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwBUILD"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode74_AsClassRule 

  ; PROCEDURE BuildNode80_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode80_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"CASE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode80_Alternation 

  ; PROCEDURE BuildNode78_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode78_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode80_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwCASE"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode78_AsClassRule 

  ; PROCEDURE BuildNode84_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode84_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"OF\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode84_Alternation 

  ; PROCEDURE BuildNode82_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode82_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode84_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwOF"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode82_AsClassRule 

  ; PROCEDURE BuildNode88_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode88_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ELSE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode88_Alternation 

  ; PROCEDURE BuildNode86_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode86_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode88_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwELSE"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode86_AsClassRule 

  ; PROCEDURE BuildNode92_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode92_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ABSENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode92_Alternation 

  ; PROCEDURE BuildNode90_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode90_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode92_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwABSENT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode90_AsClassRule 

  ; PROCEDURE BuildNode96_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode96_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"EMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode96_Alternation 

  ; PROCEDURE BuildNode94_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode94_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode96_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwEMPTY"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode94_AsClassRule 

  ; PROCEDURE BuildNode100_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode100_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INDENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode100_Alternation 

  ; PROCEDURE BuildNode98_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode98_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode100_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwINDENT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode98_AsClassRule 

  ; PROCEDURE BuildNode104_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode104_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INLINE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode104_Alternation 

  ; PROCEDURE BuildNode102_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode102_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode104_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwINLINE"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode102_AsClassRule 

  ; PROCEDURE BuildNode108_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode108_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NIL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode108_Alternation 

  ; PROCEDURE BuildNode106_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode106_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode108_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNIL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode106_AsClassRule 

  ; PROCEDURE BuildNode112_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode112_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERSION\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode112_Alternation 

  ; PROCEDURE BuildNode110_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode110_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode112_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwVERSION"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode110_AsClassRule 

  ; PROCEDURE BuildNode116_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode116_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"SUFFIXES\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode116_Alternation 

  ; PROCEDURE BuildNode114_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode114_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode116_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwSUFFIXES"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode114_AsClassRule 

  ; PROCEDURE BuildNode120_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode120_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode120_Alternation 

  ; PROCEDURE BuildNode118_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode118_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode120_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseParen"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode118_AsClassRule 

  ; PROCEDURE BuildNode124_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode124_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode124_Alternation 

  ; PROCEDURE BuildNode122_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode122_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode124_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenParen"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode122_AsClassRule 

  ; PROCEDURE BuildNode128_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode128_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode128_Alternation 

  ; PROCEDURE BuildNode126_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode126_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode128_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "At"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode126_AsClassRule 

  ; PROCEDURE BuildNode132_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode132_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode132_Alternation 

  ; PROCEDURE BuildNode130_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode130_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode132_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Bang"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode130_AsClassRule 

  ; PROCEDURE BuildNode136_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode136_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode136_Alternation 

  ; PROCEDURE BuildNode134_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode134_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode136_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Dollar"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode134_AsClassRule 

  ; PROCEDURE BuildNode140_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode140_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode140_Alternation 

  ; PROCEDURE BuildNode138_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode138_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode140_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Circumflex"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode138_AsClassRule 

  ; PROCEDURE BuildNode144_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode144_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode144_Alternation 

  ; PROCEDURE BuildNode142_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode142_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode144_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Plus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode142_AsClassRule 

  ; PROCEDURE BuildNode148_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode148_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode148_Alternation 

  ; PROCEDURE BuildNode146_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode146_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode148_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Minus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode146_AsClassRule 

  ; PROCEDURE BuildNode152_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode152_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode152_Alternation 

  ; PROCEDURE BuildNode150_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode150_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode152_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Underscore"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode150_AsClassRule 

  ; PROCEDURE BuildNode156_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode156_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode156_Alternation 

  ; PROCEDURE BuildNode154_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode154_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode156_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Arrow"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode154_AsClassRule 

  ; PROCEDURE BuildNode160_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode160_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode160_Alternation 

  ; PROCEDURE BuildNode158_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode158_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode160_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ArrowStar"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode158_AsClassRule 

  ; PROCEDURE BuildNode164_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode164_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode164_Alternation 

  ; PROCEDURE BuildNode162_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode162_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode164_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DoubleStroke"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode162_AsClassRule 

  ; PROCEDURE BuildNode168_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode168_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode168_Alternation 

  ; PROCEDURE BuildNode166_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode166_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode168_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Stroke"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode166_AsClassRule 

  ; PROCEDURE BuildNode172_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode172_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode172_Alternation 

  ; PROCEDURE BuildNode170_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode170_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode172_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Equals"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode170_AsClassRule 

  ; PROCEDURE BuildNode177_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode177_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode177_Alternation 

  ; PROCEDURE BuildNode174_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode174_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode177_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseBrace"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(*CloseBracePlus = \"}+\" . *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode174_AsClassRule 

  ; PROCEDURE BuildNode181_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode181_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode181_Alternation 

  ; PROCEDURE BuildNode179_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode179_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode181_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenBrace"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode179_AsClassRule 

  ; PROCEDURE BuildNode185_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode185_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode185_Alternation 

  ; PROCEDURE BuildNode183_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode183_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode185_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseBracket"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode183_AsClassRule 

  ; PROCEDURE BuildNode189_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode189_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode189_Alternation 

  ; PROCEDURE BuildNode187_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode187_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode189_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenBracket"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode187_AsClassRule 

  ; PROCEDURE BuildNode193_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode193_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode193_Alternation 

  ; PROCEDURE BuildNode191_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode191_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode193_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Semicolon"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode191_AsClassRule 

  ; PROCEDURE BuildNode197_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode197_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode197_Alternation 

  ; PROCEDURE BuildNode195_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode195_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode197_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonEquals"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode195_AsClassRule 

  ; PROCEDURE BuildNode201_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode201_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode201_Alternation 

  ; PROCEDURE BuildNode199_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode199_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode201_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonEqualsStar"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode199_AsClassRule 

  ; PROCEDURE BuildNode205_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode205_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode205_Alternation 

  ; PROCEDURE BuildNode203_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode203_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode205_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonEqualsPlus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode203_AsClassRule 

  ; PROCEDURE BuildNode209_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode209_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=++\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode209_Alternation 

  ; PROCEDURE BuildNode207_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode207_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode209_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonEqualsPlusPlus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode207_AsClassRule 

  ; PROCEDURE BuildNode213_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode213_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode213_Alternation 

  ; PROCEDURE BuildNode211_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode211_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode213_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColon"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode211_AsClassRule 

  ; PROCEDURE BuildNode217_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode217_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode217_Alternation 

  ; PROCEDURE BuildNode215_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode215_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode217_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonPlus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode215_AsClassRule 

  ; PROCEDURE BuildNode221_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode221_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode221_Alternation 

  ; PROCEDURE BuildNode219_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode219_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode221_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonStar"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode219_AsClassRule 

  ; PROCEDURE BuildNode225_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode225_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode225_Alternation 

  ; PROCEDURE BuildNode223_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode223_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode225_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Dot"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode223_AsClassRule 

  ; PROCEDURE BuildNode229_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode229_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\",\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode229_Alternation 

  ; PROCEDURE BuildNode227_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode227_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode229_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Comma"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode227_AsClassRule 

  ; PROCEDURE BuildNode233_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode233_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode233_Alternation 

  ; PROCEDURE BuildNode231_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode231_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode233_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Colon"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode231_AsClassRule 

  ; PROCEDURE BuildNode235_StartRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode235_StartRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . StartRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The abstract syntax of Ldl1: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode235_StartRule 

  ; PROCEDURE BuildNode243_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode243_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode243_IdentPlusList 

  ; PROCEDURE BuildNode247_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode247_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode247_AsReqdChild 

  ; PROCEDURE BuildNode250_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode250_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Version"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode250_AsOptChild 

  ; PROCEDURE BuildNode253_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode253_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rules"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode253_AsReqdChild 

  ; PROCEDURE BuildNode256_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode256_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClosingName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode256_AsReqdChild 

  ; PROCEDURE BuildNode246_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode246_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode256_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode253_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode250_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode247_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode246_AsChildList 

  ; PROCEDURE BuildNode242_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode242_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode246_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode243_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode242_AsFixedRule 

  ; PROCEDURE BuildNode260_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode260_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode260_IdentPlusList 

  ; PROCEDURE BuildNode259_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode259_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode260_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode259_AsStarRule 

  ; PROCEDURE BuildNode265_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode265_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode265_AsVarTermRule 

  ; PROCEDURE BuildNode268_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode268_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode268_AsVarTermRule 

  ; PROCEDURE BuildNode271_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode271_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode271_AsVarTermRule 

  ; PROCEDURE BuildNode275_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode275_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode275_IdentPlusList 

  ; PROCEDURE BuildNode274_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode274_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode275_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode274_AsStarRule 

  ; PROCEDURE BuildNode283_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode283_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode283_Alternation 

  ; PROCEDURE BuildNode280_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode280_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode283_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode280_AsClassRule 

  ; PROCEDURE BuildNode290_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode290_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode290_IdentPlusList 

  ; PROCEDURE BuildNode296_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode296_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode296_AsReqdChild 

  ; PROCEDURE BuildNode299_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode299_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Suffixes"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode299_AsOptChild 

  ; PROCEDURE BuildNode295_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode295_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode299_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode296_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode295_AsChildList 

  ; PROCEDURE BuildNode289_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode289_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode295_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode290_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode289_AsFixedRule 

  ; PROCEDURE BuildNode303_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode303_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode303_IdentPlusList 

  ; PROCEDURE BuildNode302_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode302_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode303_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode302_AsStarRule 

  ; PROCEDURE BuildNode313_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode313_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsCsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode313_Alternation 

  ; PROCEDURE BuildNode308_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode308_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode313_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode308_AsClassRule 

  ; PROCEDURE BuildNode320_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode320_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode320_IdentPlusList 

  ; PROCEDURE BuildNode324_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode324_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Name"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode324_AsReqdChild 

  ; PROCEDURE BuildNode323_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode323_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode324_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode323_AsChildList 

  ; PROCEDURE BuildNode319_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode319_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode323_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode320_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode319_AsFixedRule 

  ; PROCEDURE BuildNode328_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode328_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode328_IdentPlusList 

  ; PROCEDURE BuildNode332_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode332_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode332_AsReqdChild 

  ; PROCEDURE BuildNode335_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode335_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode335_AsReqdChild 

  ; PROCEDURE BuildNode331_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode331_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode335_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode332_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode331_AsChildList 

  ; PROCEDURE BuildNode327_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode327_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode331_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode328_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode327_AsFixedRule 

  ; PROCEDURE BuildNode339_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode339_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode339_IdentPlusList 

  ; PROCEDURE BuildNode338_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode338_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode339_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode338_AsStarRule 

  ; PROCEDURE BuildNode347_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode347_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode347_Alternation 

  ; PROCEDURE BuildNode344_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode344_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode347_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode344_AsClassRule 

  ; PROCEDURE BuildNode351_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode351_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode351_IdentPlusList 

  ; PROCEDURE BuildNode356_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode356_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode356_AsOptChild 

  ; PROCEDURE BuildNode359_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode359_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode359_AsReqdChild 

  ; PROCEDURE BuildNode355_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode355_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode359_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode356_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode355_AsChildList 

  ; PROCEDURE BuildNode350_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode350_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode355_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode351_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode350_AsFixedRule 

  ; PROCEDURE BuildNode365_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode365_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode365_Alternation 

  ; PROCEDURE BuildNode362_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode362_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode365_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode362_AsClassRule 

  ; PROCEDURE BuildNode371_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode371_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode371_Alternation 

  ; PROCEDURE BuildNode368_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode368_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode371_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode368_AsClassRule 

  ; PROCEDURE BuildNode375_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode375_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode375_IdentPlusList 

  ; PROCEDURE BuildNode380_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode380_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode380_AsReqdChild 

  ; PROCEDURE BuildNode383_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode383_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode383_AsOptChild 

  ; PROCEDURE BuildNode386_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode386_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode386_AsReqdChild 

  ; PROCEDURE BuildNode379_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode379_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode386_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode383_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode380_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode379_AsChildList 

  ; PROCEDURE BuildNode374_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode374_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode379_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode375_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode374_AsFixedRule 

  ; PROCEDURE BuildNode390_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode390_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsCsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode390_IdentPlusList 

  ; PROCEDURE BuildNode395_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode395_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClassName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode395_AsReqdChild 

  ; PROCEDURE BuildNode398_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode398_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClassMembers"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode398_AsReqdChild 

  ; PROCEDURE BuildNode394_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode394_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode398_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode395_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode394_AsChildList 

  ; PROCEDURE BuildNode389_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode389_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode394_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode390_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode389_AsFixedRule 

  ; PROCEDURE BuildNode402_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode402_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode402_IdentPlusList 

  ; PROCEDURE BuildNode401_AsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode401_AsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode402_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode401_AsPlusRule 

  ; PROCEDURE BuildNode412_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode412_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode412_Alternation 

  ; PROCEDURE BuildNode407_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode407_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode412_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode407_AsClassRule 

  ; PROCEDURE BuildNode417_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode417_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode417_IdentPlusList 

  ; PROCEDURE BuildNode421_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode421_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode421_AsReqdChild 

  ; PROCEDURE BuildNode424_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode424_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Build"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode424_AsOptChild 

  ; PROCEDURE BuildNode427_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode427_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternatives"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode427_AsReqdChild 

  ; PROCEDURE BuildNode420_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode420_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode427_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode424_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode421_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode420_AsChildList 

  ; PROCEDURE BuildNode416_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode416_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode420_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode417_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode416_AsFixedRule 

  ; PROCEDURE BuildNode431_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode431_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode431_IdentPlusList 

  ; PROCEDURE BuildNode430_AsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode430_AsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode431_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode430_AsPlusRule 

  ; PROCEDURE BuildNode437_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode437_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode437_IdentPlusList 

  ; PROCEDURE BuildNode441_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode441_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode441_AsReqdChild 

  ; PROCEDURE BuildNode444_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode444_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Build"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode444_AsOptChild 

  ; PROCEDURE BuildNode447_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode447_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode447_AsReqdChild 

  ; PROCEDURE BuildNode440_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode440_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode447_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode444_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode441_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode440_AsChildList 

  ; PROCEDURE BuildNode436_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode436_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode440_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode437_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode436_AsFixedRule 

  ; PROCEDURE BuildNode451_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode451_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode451_IdentPlusList 

  ; PROCEDURE BuildNode450_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode450_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode451_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode450_AsStarRule 

  ; PROCEDURE BuildNode459_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode459_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode459_Alternation 

  ; PROCEDURE BuildNode456_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode456_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode459_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode456_AsClassRule 

  ; PROCEDURE BuildNode465_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode465_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Nil"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode465_Alternation 

  ; PROCEDURE BuildNode462_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode462_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode465_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode462_AsClassRule 

  ; PROCEDURE BuildNode471_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode471_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode471_Alternation 

  ; PROCEDURE BuildNode468_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode468_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode471_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode468_AsClassRule 

  ; PROCEDURE BuildNode476_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode476_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPluralRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode476_Alternation 

  ; PROCEDURE BuildNode473_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode473_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode476_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode473_AsClassRule 

  ; PROCEDURE BuildNode481_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode481_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPluralRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode481_IdentPlusList 

  ; PROCEDURE BuildNode487_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode487_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode487_AsReqdChild 

  ; PROCEDURE BuildNode490_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode490_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Build"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode490_AsOptChild 

  ; PROCEDURE BuildNode493_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode493_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ListChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode493_AsReqdChild 

  ; PROCEDURE BuildNode496_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode496_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Separators"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode496_AsOptChild 

  ; PROCEDURE BuildNode486_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode486_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode496_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode493_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode490_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode487_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode486_AsChildList 

  ; PROCEDURE BuildNode480_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode480_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode486_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode481_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode480_AsFixedRule 

  ; PROCEDURE BuildNode500_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode500_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode500_IdentPlusList 

  ; PROCEDURE BuildNode499_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode499_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode500_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode499_AsStarRule 

  ; PROCEDURE BuildNode508_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode508_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntSameLineRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 1
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* A delimiter, i.e. terminal with fixed spelling. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL , EstHs . EstChildKindTrailingMod 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode508_Alternation 

  ; PROCEDURE BuildNode505_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode505_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode508_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode505_AsClassRule 

  ; PROCEDURE BuildNode513_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode513_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Nil"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode513_IdentPlusList 

  ; PROCEDURE BuildNode512_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode512_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode513_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode512_AsFixedRule 

  ; PROCEDURE BuildNode517_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode517_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode517_IdentPlusList 

  ; PROCEDURE BuildNode523_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode523_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Levels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode523_AsReqdChild 

  ; PROCEDURE BuildNode522_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode522_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode523_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode522_AsChildList 

  ; PROCEDURE BuildNode516_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode516_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode522_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode517_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode516_AsFixedRule 

  ; PROCEDURE BuildNode527_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode527_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode527_IdentPlusList 

  ; PROCEDURE BuildNode526_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode526_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode527_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode526_AsStarRule 

  ; PROCEDURE BuildNode535_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode535_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode535_Alternation 

  ; PROCEDURE BuildNode532_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode532_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode535_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode532_AsClassRule 

  ; PROCEDURE BuildNode540_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode540_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode540_IdentPlusList 

  ; PROCEDURE BuildNode546_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode546_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Operators"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode546_AsReqdChild 

  ; PROCEDURE BuildNode545_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode545_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode546_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode545_AsChildList 

  ; PROCEDURE BuildNode539_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode539_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode545_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode540_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode539_AsFixedRule 

  ; PROCEDURE BuildNode554_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode554_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsInlineRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode554_Alternation 

  ; PROCEDURE BuildNode549_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode549_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode554_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode549_AsClassRule 

  ; PROCEDURE BuildNode561_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode561_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode561_Alternation 

  ; PROCEDURE BuildNode558_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode558_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode561_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode558_AsClassRule 

  ; PROCEDURE BuildNode567_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode567_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode567_IdentPlusList 

  ; PROCEDURE BuildNode574_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode574_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode574_AsReqdChild 

  ; PROCEDURE BuildNode577_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode577_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode577_AsReqdChild 

  ; PROCEDURE BuildNode573_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode573_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode577_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode574_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode573_AsChildList 

  ; PROCEDURE BuildNode566_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode566_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode573_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode567_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode566_AsFixedRule 

  ; PROCEDURE BuildNode581_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode581_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsInlineRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode581_IdentPlusList 

  ; PROCEDURE BuildNode585_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode585_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Name"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode585_AsReqdChild 

  ; PROCEDURE BuildNode588_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode588_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode588_AsReqdChild 

  ; PROCEDURE BuildNode584_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode584_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode588_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode585_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode584_AsChildList 

  ; PROCEDURE BuildNode580_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode580_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode584_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode581_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode580_AsFixedRule 

  ; PROCEDURE BuildNode592_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode592_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode592_IdentPlusList 

  ; PROCEDURE BuildNode591_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode591_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode592_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode591_AsStarRule 

  ; PROCEDURE BuildNode600_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode600_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode600_Alternation 

  ; PROCEDURE BuildNode597_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode597_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode600_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode597_AsClassRule 

  ; PROCEDURE BuildNode606_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode606_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode606_IdentPlusList 

  ; PROCEDURE BuildNode605_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode605_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode606_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode605_AsStarRule 

  ; PROCEDURE BuildNode614_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode614_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode614_Alternation 

  ; PROCEDURE BuildNode611_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode611_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode614_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode611_AsClassRule 

  ; PROCEDURE BuildNode620_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode620_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode620_IdentPlusList 

  ; PROCEDURE BuildNode619_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode619_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode620_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode619_AsFixedRule 

  ; PROCEDURE BuildNode626_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode626_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode626_Alternation 

  ; PROCEDURE BuildNode623_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode623_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode626_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode623_AsClassRule 

  ; PROCEDURE BuildNode637_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode637_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode637_IdentPlusList 

  ; PROCEDURE BuildNode643_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode643_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IndentCode"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode643_AsOptChild 

  ; PROCEDURE BuildNode642_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode642_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode643_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode642_AsChildList 

  ; PROCEDURE BuildNode636_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode636_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode642_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode637_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode636_AsFixedRule 

  ; PROCEDURE BuildNode647_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode647_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode647_IdentPlusList 

  ; PROCEDURE BuildNode656_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode656_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IndentCode"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode656_AsReqdChild 

  ; PROCEDURE BuildNode655_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode655_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode656_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode655_AsChildList 

  ; PROCEDURE BuildNode646_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode646_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode655_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode647_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode646_AsFixedRule 

  ; PROCEDURE BuildNode662_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode662_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode662_Alternation 

  ; PROCEDURE BuildNode659_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode659_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode662_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode659_AsClassRule 

  ; PROCEDURE BuildNode670_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode670_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode670_Alternation 

  ; PROCEDURE BuildNode667_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode667_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode670_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode667_AsClassRule 

  ; PROCEDURE BuildNode674_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode674_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode674_IdentPlusList 

  ; PROCEDURE BuildNode681_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode681_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode681_AsReqdChild 

  ; PROCEDURE BuildNode680_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode680_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode681_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode680_AsChildList 

  ; PROCEDURE BuildNode673_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode673_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode680_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode674_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode673_AsFixedRule 

  ; PROCEDURE BuildNode687_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode687_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCase"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode687_Alternation 

  ; PROCEDURE BuildNode684_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode684_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode687_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode684_AsClassRule 

  ; PROCEDURE BuildNode693_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode693_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode693_IdentPlusList 

  ; PROCEDURE BuildNode697_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode697_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode697_AsOptChild 

  ; PROCEDURE BuildNode700_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode700_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode700_AsOptChild 

  ; PROCEDURE BuildNode703_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode703_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode703_AsReqdChild 

  ; PROCEDURE BuildNode696_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode696_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode703_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode700_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode697_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode696_AsChildList 

  ; PROCEDURE BuildNode692_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode692_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode696_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode693_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode692_AsFixedRule 

  ; PROCEDURE BuildNode709_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode709_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode709_Alternation 

  ; PROCEDURE BuildNode706_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode706_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode709_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode706_AsClassRule 

  ; PROCEDURE BuildNode714_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode714_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode714_Alternation 

  ; PROCEDURE BuildNode712_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode712_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode714_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode712_AsClassRule 

  ; PROCEDURE BuildNode718_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode718_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode718_IdentPlusList 

  ; PROCEDURE BuildNode717_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode717_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode718_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode717_AsFixedRule 

  ; PROCEDURE BuildNode724_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode724_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonplural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondEmpty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondAbsent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode724_Alternation 

  ; PROCEDURE BuildNode721_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode721_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode724_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode721_AsClassRule 

  ; PROCEDURE BuildNode733_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode733_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode733_IdentPlusList 

  ; PROCEDURE BuildNode732_AsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode732_AsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode733_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode732_AsPlusRule 

  ; PROCEDURE BuildNode739_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode739_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonplural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondEmpty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondAbsent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode739_IdentPlusList 

  ; PROCEDURE BuildNode748_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode748_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode748_AsReqdChild 

  ; PROCEDURE BuildNode747_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode747_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode748_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode747_AsChildList 

  ; PROCEDURE BuildNode738_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode738_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode747_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode739_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode738_AsFixedRule 

  ; PROCEDURE BuildNode752_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode752_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode752_IdentPlusList 

  ; PROCEDURE BuildNode756_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode756_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Class"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode756_AsReqdChild 

  ; PROCEDURE BuildNode759_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode759_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode759_AsReqdChild 

  ; PROCEDURE BuildNode755_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode755_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode759_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode756_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode755_AsChildList 

  ; PROCEDURE BuildNode751_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode751_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode755_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode752_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode751_AsFixedRule 

  ; PROCEDURE BuildNode763_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode763_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCase"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode763_IdentPlusList 

  ; PROCEDURE BuildNode767_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode767_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "EstChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode767_AsReqdChild 

  ; PROCEDURE BuildNode770_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode770_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternatives"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode770_AsReqdChild 

  ; PROCEDURE BuildNode773_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode773_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Else"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode773_AsOptChild 

  ; PROCEDURE BuildNode766_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode766_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode773_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode770_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode767_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode766_AsChildList 

  ; PROCEDURE BuildNode762_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode762_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode766_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode763_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode762_AsFixedRule 

  ; PROCEDURE BuildNode779_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode779_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode779_Alternation 

  ; PROCEDURE BuildNode776_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode776_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode779_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode776_AsClassRule 

  ; PROCEDURE BuildNode785_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode785_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode785_IdentPlusList 

  ; PROCEDURE BuildNode792_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode792_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode792_AsReqdChild 

  ; PROCEDURE BuildNode795_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode795_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ListChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode795_AsReqdChild 

  ; PROCEDURE BuildNode798_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode798_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatters"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode798_AsOptChild 

  ; PROCEDURE BuildNode791_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode791_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode798_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode795_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode792_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode791_AsChildList 

  ; PROCEDURE BuildNode784_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode784_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode791_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode785_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode784_AsFixedRule 

  ; PROCEDURE BuildNode811_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode811_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERSION\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode811_Concatenation 

  ; PROCEDURE BuildNode808_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode808_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode811_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode808_Concatenation 

  ; PROCEDURE BuildNode801_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode801_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode808_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The Concrete Syntax of Ldl1: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 2
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode801_CsFixedRule 

  ; PROCEDURE BuildNode821_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode821_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode821_CsAtomList 

  ; PROCEDURE BuildNode817_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode817_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode821_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode817_CsStarRule 

  ; PROCEDURE BuildNode823_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode823_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode823_CsStarRule 

  ; PROCEDURE BuildNode836_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode836_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"SUFFIXES\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode836_Concatenation 

  ; PROCEDURE BuildNode833_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode833_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode836_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode833_Concatenation 

  ; PROCEDURE BuildNode828_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode828_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode833_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode828_CsFixedRule 

  ; PROCEDURE BuildNode844_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode844_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\",\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode844_CsAtomList 

  ; PROCEDURE BuildNode840_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode840_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode844_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode840_CsStarRule 

  ; PROCEDURE BuildNode851_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode851_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode851_Concatenation 

  ; PROCEDURE BuildNode846_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode846_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode851_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode846_CsFixedRule 

  ; PROCEDURE BuildNode858_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode858_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode858_Concatenation 

  ; PROCEDURE BuildNode855_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode855_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode858_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode855_CsFixedRule 

  ; PROCEDURE BuildNode867_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode867_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode867_CsAtomList 

  ; PROCEDURE BuildNode863_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode863_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode867_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode863_CsStarRule 

  ; PROCEDURE BuildNode873_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode873_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode873_Concatenation 

  ; PROCEDURE BuildNode872_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode872_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode873_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode872_Concatenation 

  ; PROCEDURE BuildNode869_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode869_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode872_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode869_CsFixedRule 

  ; PROCEDURE BuildNode880_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode880_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode880_Concatenation 

  ; PROCEDURE BuildNode879_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode879_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode880_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode879_Concatenation 

  ; PROCEDURE BuildNode877_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode877_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode879_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode877_CsFixedRule 

  ; PROCEDURE BuildNode890_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode890_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode890_Concatenation 

  ; PROCEDURE BuildNode889_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode889_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode890_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode889_Concatenation 

  ; PROCEDURE BuildNode886_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode886_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode889_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode886_CsFixedRule 

  ; PROCEDURE BuildNode899_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode899_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode899_Concatenation 

  ; PROCEDURE BuildNode898_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode898_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode899_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode898_Concatenation 

  ; PROCEDURE BuildNode896_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode896_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode898_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode896_CsFixedRule 

  ; PROCEDURE BuildNode913_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode913_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode913_Concatenation 

  ; PROCEDURE BuildNode910_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode910_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode913_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode910_Concatenation 

  ; PROCEDURE BuildNode907_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode907_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode910_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode907_CsFixedRule 

  ; PROCEDURE BuildNode923_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode923_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode923_Concatenation 

  ; PROCEDURE BuildNode920_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode920_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode923_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode920_Concatenation 

  ; PROCEDURE BuildNode918_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode918_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode920_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode918_CsFixedRule 

  ; PROCEDURE BuildNode936_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode936_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode936_Concatenation 

  ; PROCEDURE BuildNode933_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode933_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode936_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode933_Concatenation 

  ; PROCEDURE BuildNode930_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode930_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode933_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode930_CsFixedRule 

  ; PROCEDURE BuildNode946_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode946_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode946_Concatenation 

  ; PROCEDURE BuildNode943_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode943_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode946_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode943_Concatenation 

  ; PROCEDURE BuildNode941_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode941_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode943_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode941_CsFixedRule 

  ; PROCEDURE BuildNode956_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode956_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode956_Concatenation 

  ; PROCEDURE BuildNode953_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode953_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode956_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode953_CsFixedRule 

  ; PROCEDURE BuildNode963_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode963_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode963_Concatenation 

  ; PROCEDURE BuildNode961_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode961_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode963_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsCsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode961_CsFixedRule 

  ; PROCEDURE BuildNode973_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode973_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode973_CsAtomList 

  ; PROCEDURE BuildNode969_CsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode969_CsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode973_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode969_CsPlusRule 

  ; PROCEDURE BuildNode982_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode982_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode982_Concatenation 

  ; PROCEDURE BuildNode980_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode980_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode982_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode980_Concatenation 

  ; PROCEDURE BuildNode975_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode975_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode980_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode975_CsFixedRule 

  ; PROCEDURE BuildNode992_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode992_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode992_CsAtomList 

  ; PROCEDURE BuildNode988_CsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode988_CsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode992_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode988_CsPlusRule 

  ; PROCEDURE BuildNode999_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode999_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode999_Concatenation 

  ; PROCEDURE BuildNode997_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode997_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode999_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode997_Concatenation 

  ; PROCEDURE BuildNode994_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode994_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode997_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode994_CsFixedRule 

  ; PROCEDURE BuildNode1005_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1005_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1005_CsStarRule 

  ; PROCEDURE BuildNode1013_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1013_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1013_Alternation 

  ; PROCEDURE BuildNode1010_CsAltRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1010_CsAltRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAltRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1013_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1010_CsAltRule 

  ; PROCEDURE BuildNode1026_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1026_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1026_Concatenation 

  ; PROCEDURE BuildNode1016_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1016_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1026_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "*)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "    CsChildCs = CsReqdChild | CsOptChildCs ."
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          why should that matter? "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          name that is not reachable in the abstract syntax.  But"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          The only thing this would do, I think, is create a class"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          into As Class rules, as follows:?  "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* CHECK: Is there any reason not to make this and all Cs Alt rules"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1016_CsFixedRule 

  ; PROCEDURE BuildNode1035_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1035_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1035_Concatenation 

  ; PROCEDURE BuildNode1040_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1040_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1040_Concatenation 

  ; PROCEDURE BuildNode1033_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1033_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1040_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1035_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1033_Concatenation 

  ; PROCEDURE BuildNode1030_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1030_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1033_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1030_CsFixedRule 

  ; PROCEDURE BuildNode1048_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1048_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1048_Concatenation 

  ; PROCEDURE BuildNode1053_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1053_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1053_Concatenation 

  ; PROCEDURE BuildNode1046_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1046_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1053_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1048_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1046_Concatenation 

  ; PROCEDURE BuildNode1044_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1044_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1046_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1044_CsFixedRule 

  ; PROCEDURE BuildNode1061_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1061_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1061_Concatenation 

  ; PROCEDURE BuildNode1066_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1066_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1066_Concatenation 

  ; PROCEDURE BuildNode1059_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1059_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1066_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=++\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1061_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1059_Concatenation 

  ; PROCEDURE BuildNode1057_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1057_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1059_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPluralRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1057_CsFixedRule 

  ; PROCEDURE BuildNode1070_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1070_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1070_CsStarRule 

  ; PROCEDURE BuildNode1078_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1078_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NIL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1078_Concatenation 

  ; PROCEDURE BuildNode1075_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1075_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1078_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Nil"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1075_CsFixedRule 

  ; PROCEDURE BuildNode1085_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1085_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1085_Concatenation 

  ; PROCEDURE BuildNode1080_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1080_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1085_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1080_CsFixedRule 

  ; PROCEDURE BuildNode1089_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1089_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1089_CsStarRule 

  ; PROCEDURE BuildNode1097_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1097_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1097_Concatenation 

  ; PROCEDURE BuildNode1094_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1094_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1097_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1094_CsFixedRule 

  ; PROCEDURE BuildNode1102_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1102_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1102_Concatenation 

  ; PROCEDURE BuildNode1100_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1100_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1102_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1100_CsFixedRule 

  ; PROCEDURE BuildNode1107_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1107_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1107_Concatenation 

  ; PROCEDURE BuildNode1105_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1105_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1107_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1105_CsFixedRule 

  ; PROCEDURE BuildNode1115_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1115_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1115_Concatenation 

  ; PROCEDURE BuildNode1110_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1110_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1115_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1110_CsFixedRule 

  ; PROCEDURE BuildNode1122_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1122_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1122_Concatenation 

  ; PROCEDURE BuildNode1120_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1120_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1122_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1120_CsFixedRule 

  ; PROCEDURE BuildNode1130_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1130_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1130_Concatenation 

  ; PROCEDURE BuildNode1128_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1128_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1130_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1128_CsFixedRule 

  ; PROCEDURE BuildNode1138_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1138_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1138_Concatenation 

  ; PROCEDURE BuildNode1136_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1136_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1138_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1136_CsFixedRule 

  ; PROCEDURE BuildNode1147_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1147_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INLINE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1147_Concatenation 

  ; PROCEDURE BuildNode1144_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1144_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1147_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsInlineRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1144_CsFixedRule 

  ; PROCEDURE BuildNode1153_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1153_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1153_CsStarRule 

  ; PROCEDURE BuildNode1158_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1158_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1158_CsStarRule 

  ; PROCEDURE BuildNode1166_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1166_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1166_Concatenation 

  ; PROCEDURE BuildNode1163_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1163_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1166_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1163_CsFixedRule 

  ; PROCEDURE BuildNode1171_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1171_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1171_Concatenation 

  ; PROCEDURE BuildNode1168_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1168_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1171_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1168_CsFixedRule 

  ; PROCEDURE BuildNode1178_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1178_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1178_Concatenation 

  ; PROCEDURE BuildNode1176_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1176_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1178_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1176_Concatenation 

  ; PROCEDURE BuildNode1173_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1173_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1176_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1173_CsFixedRule 

  ; PROCEDURE BuildNode1184_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1184_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1184_Concatenation 

  ; PROCEDURE BuildNode1182_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1182_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1184_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1182_Concatenation 

  ; PROCEDURE BuildNode1180_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1180_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1182_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1180_CsFixedRule 

  ; PROCEDURE BuildNode1190_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1190_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1190_Concatenation 

  ; PROCEDURE BuildNode1188_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1188_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1190_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1188_Concatenation 

  ; PROCEDURE BuildNode1186_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1186_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1188_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1186_CsFixedRule 

  ; PROCEDURE BuildNode1194_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1194_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1194_Concatenation 

  ; PROCEDURE BuildNode1192_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1192_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1194_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1192_CsFixedRule 

  ; PROCEDURE BuildNode1200_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1200_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1200_Concatenation 

  ; PROCEDURE BuildNode1198_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1198_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1200_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1198_CsFixedRule 

  ; PROCEDURE BuildNode1206_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1206_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1206_Concatenation 

  ; PROCEDURE BuildNode1204_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1204_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1206_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1204_CsFixedRule 

  ; PROCEDURE BuildNode1212_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1212_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1212_Concatenation 

  ; PROCEDURE BuildNode1210_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1210_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1212_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1210_CsFixedRule 

  ; PROCEDURE BuildNode1218_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1218_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1218_Concatenation 

  ; PROCEDURE BuildNode1216_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1216_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1218_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1216_CsFixedRule 

  ; PROCEDURE BuildNode1224_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1224_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1224_Concatenation 

  ; PROCEDURE BuildNode1222_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1222_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1224_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1222_CsFixedRule 

  ; PROCEDURE BuildNode1231_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1231_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1231_Concatenation 

  ; PROCEDURE BuildNode1228_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1228_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1231_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1228_CsFixedRule 

  ; PROCEDURE BuildNode1237_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1237_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1237_Concatenation 

  ; PROCEDURE BuildNode1235_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1235_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1237_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1235_CsFixedRule 

  ; PROCEDURE BuildNode1244_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1244_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1244_Concatenation 

  ; PROCEDURE BuildNode1242_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1242_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1244_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1242_CsFixedRule 

  ; PROCEDURE BuildNode1251_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1251_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1251_Concatenation 

  ; PROCEDURE BuildNode1249_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1249_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1251_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1249_CsFixedRule 

  ; PROCEDURE BuildNode1259_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1259_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1259_Concatenation 

  ; PROCEDURE BuildNode1256_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1256_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1259_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1256_CsFixedRule 

  ; PROCEDURE BuildNode1264_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1264_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1264_Concatenation 

  ; PROCEDURE BuildNode1262_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1262_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1264_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1262_CsFixedRule 

  ; PROCEDURE BuildNode1269_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1269_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1269_Concatenation 

  ; PROCEDURE BuildNode1267_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1267_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1269_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1267_CsFixedRule 

  ; PROCEDURE BuildNode1276_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1276_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1276_Concatenation 

  ; PROCEDURE BuildNode1279_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1279_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INDENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1279_Concatenation 

  ; PROCEDURE BuildNode1275_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1275_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1279_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1276_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1275_Concatenation 

  ; PROCEDURE BuildNode1272_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1272_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1275_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1272_CsFixedRule 

  ; PROCEDURE BuildNode1286_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1286_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1286_Concatenation 

  ; PROCEDURE BuildNode1289_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1289_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INDENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1289_Concatenation 

  ; PROCEDURE BuildNode1285_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1285_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1289_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1286_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1285_Concatenation 

  ; PROCEDURE BuildNode1283_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1283_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1285_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1283_CsFixedRule 

  ; PROCEDURE BuildNode1298_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1298_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ABSENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1298_Concatenation 

  ; PROCEDURE BuildNode1295_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1295_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1298_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondAbsent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1295_CsFixedRule 

  ; PROCEDURE BuildNode1305_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1305_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1305_Concatenation 

  ; PROCEDURE BuildNode1303_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1303_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1305_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1303_CsFixedRule 

  ; PROCEDURE BuildNode1312_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1312_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"EMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1312_Concatenation 

  ; PROCEDURE BuildNode1310_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1310_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1312_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondEmpty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1310_CsFixedRule 

  ; PROCEDURE BuildNode1319_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1319_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1319_Concatenation 

  ; PROCEDURE BuildNode1317_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1317_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1319_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1317_CsFixedRule 

  ; PROCEDURE BuildNode1326_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1326_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1326_Concatenation 

  ; PROCEDURE BuildNode1324_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1324_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1326_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1324_CsFixedRule 

  ; PROCEDURE BuildNode1333_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1333_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONPLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1333_Concatenation 

  ; PROCEDURE BuildNode1331_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1331_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1333_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonplural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1331_CsFixedRule 

  ; PROCEDURE BuildNode1340_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1340_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1340_Concatenation 

  ; PROCEDURE BuildNode1338_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1338_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1340_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1338_CsFixedRule 

  ; PROCEDURE BuildNode1350_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1350_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1350_CsAtomList 

  ; PROCEDURE BuildNode1346_CsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1346_CsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1350_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1346_CsPlusRule 

  ; PROCEDURE BuildNode1360_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1360_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ELSE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1360_Concatenation 

  ; PROCEDURE BuildNode1355_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1355_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1360_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"OF\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"CASE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1355_Concatenation 

  ; PROCEDURE BuildNode1352_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1352_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1355_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCase"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1352_CsFixedRule 

  ; PROCEDURE BuildNode1371_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1371_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1371_Concatenation 

  ; PROCEDURE BuildNode1367_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1367_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1371_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1367_Concatenation 

  ; PROCEDURE BuildNode1364_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1364_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1367_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1364_CsFixedRule 

  ; PROCEDURE BuildNode1382_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1382_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1382_Concatenation 

  ; PROCEDURE BuildNode1377_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1377_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1382_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1377_Concatenation 

  ; PROCEDURE BuildNode1375_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1375_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1377_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1375_CsFixedRule 

  ; PROCEDURE BuildNode1393_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1393_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1393_Concatenation 

  ; PROCEDURE BuildNode1388_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1388_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1393_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1388_Concatenation 

  ; PROCEDURE BuildNode1386_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1386_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1388_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1386_CsFixedRule 

  ; PROCEDURE BuildNode1404_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1404_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1404_Concatenation 

  ; PROCEDURE BuildNode1399_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1399_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1404_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1399_Concatenation 

  ; PROCEDURE BuildNode1397_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1397_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1399_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1397_CsFixedRule 

  ; PROCEDURE BuildNode1409_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1409_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The Format syntax of Ldl1: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1409_IdentPlusList 

  ; PROCEDURE BuildNode1418_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1418_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1418_FsChildPlain 

  ; PROCEDURE BuildNode1425_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1425_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1425_FsChildPlain 

  ; PROCEDURE BuildNode1423_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1423_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1425_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERSION\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1423_FsFixedChildList 

  ; PROCEDURE BuildNode1422_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1422_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1423_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1422_FsCondNonempty 

  ; PROCEDURE BuildNode1429_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1429_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "1"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1429_LineBreak 

  ; PROCEDURE BuildNode1431_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1431_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rules"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1431_FsChildPlain 

  ; PROCEDURE BuildNode1435_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1435_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1435_LineBreak 

  ; PROCEDURE BuildNode1438_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1438_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClosingName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1438_FsChildPlain 

  ; PROCEDURE BuildNode1416_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1416_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1438_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1435_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1431_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1429_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1422_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1418_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1416_FsFixedChildList 

  ; PROCEDURE BuildNode1408_FsFixedVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1408_FsFixedVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1416_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1409_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1408_FsFixedVertRule 

  ; PROCEDURE BuildNode1443_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1443_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IntStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1443_IdentPlusList 

  ; PROCEDURE BuildNode1446_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1446_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1446_FsChildPlain 

  ; PROCEDURE BuildNode1451_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1451_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1451_LineBreak 

  ; PROCEDURE BuildNode1450_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1450_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1451_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1450_FormatterList 

  ; PROCEDURE BuildNode1442_FsListFillRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1442_FsListFillRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListFillRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1450_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1446_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1443_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1442_FsListFillRule 

  ; PROCEDURE BuildNode1455_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1455_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1455_IdentPlusList 

  ; PROCEDURE BuildNode1458_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1458_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1458_FsChildPlain 

  ; PROCEDURE BuildNode1463_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1463_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1463_LineBreak 

  ; PROCEDURE BuildNode1462_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1462_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1463_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1462_FormatterList 

  ; PROCEDURE BuildNode1454_FsListVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1454_FsListVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1462_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1458_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1455_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1454_FsListVertRule 

  ; PROCEDURE BuildNode1466_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1466_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1466_IdentPlusList 

  ; PROCEDURE BuildNode1473_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1473_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1473_FsChildPlain 

  ; PROCEDURE BuildNode1477_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1477_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1477_LineBreak 

  ; PROCEDURE BuildNode1482_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1482_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1482_FsChildPlain 

  ; PROCEDURE BuildNode1480_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1480_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1482_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"SUFFIXES\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1480_FsFixedChildList 

  ; PROCEDURE BuildNode1479_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1479_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1480_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1479_FsCondNonempty 

  ; PROCEDURE BuildNode1486_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1486_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1486_LineBreak 

  ; PROCEDURE BuildNode1471_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1471_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1486_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1479_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1477_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1473_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1471_FsFixedChildList 

  ; PROCEDURE BuildNode1465_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1465_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1471_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1466_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1465_FsFixedHorizRule 

  ; PROCEDURE BuildNode1490_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1490_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StringStarList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1490_IdentPlusList 

  ; PROCEDURE BuildNode1493_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1493_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1493_FsChildPlain 

  ; PROCEDURE BuildNode1498_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1498_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1498_LineBreak 

  ; PROCEDURE BuildNode1497_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1497_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\",\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1498_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1497_FormatterList 

  ; PROCEDURE BuildNode1489_FsListFillRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1489_FsListFillRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListFillRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1497_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1493_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1490_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1489_FsListFillRule 

  ; PROCEDURE BuildNode1502_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1502_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1502_IdentPlusList 

  ; PROCEDURE BuildNode1508_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1508_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Name"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1508_FsChildPlain 

  ; PROCEDURE BuildNode1512_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1512_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1512_LineBreak 

  ; PROCEDURE BuildNode1507_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1507_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1512_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1508_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1507_FsFixedChildList 

  ; PROCEDURE BuildNode1501_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1501_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1507_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1502_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1501_FsFixedHorizRule 

  ; PROCEDURE BuildNode1517_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1517_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1517_IdentPlusList 

  ; PROCEDURE BuildNode1521_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1521_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1521_FsChildPlain 

  ; PROCEDURE BuildNode1525_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1525_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1525_LineBreak 

  ; PROCEDURE BuildNode1528_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1528_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1528_FsChildPlain 

  ; PROCEDURE BuildNode1532_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1532_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1532_LineBreak 

  ; PROCEDURE BuildNode1520_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1520_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1532_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1528_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1525_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1521_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1520_FsFixedChildList 

  ; PROCEDURE BuildNode1516_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1516_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1520_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1517_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1516_FsFixedHorizRule 

  ; PROCEDURE BuildNode1536_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1536_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1536_IdentPlusList 

  ; PROCEDURE BuildNode1539_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1539_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1539_FsChildPlain 

  ; PROCEDURE BuildNode1544_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1544_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1544_LineBreak 

  ; PROCEDURE BuildNode1543_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1543_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1544_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1543_FormatterList 

  ; PROCEDURE BuildNode1535_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1535_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1543_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1539_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1536_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1535_FsListHorizRule 

  ; PROCEDURE BuildNode1548_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1548_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1548_IdentPlusList 

  ; PROCEDURE BuildNode1554_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1554_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1554_FsChildPlain 

  ; PROCEDURE BuildNode1553_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1553_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1554_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1553_FsFixedChildList 

  ; PROCEDURE BuildNode1552_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1552_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1553_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1552_FsCondPresent 

  ; PROCEDURE BuildNode1559_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1559_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1559_LineBreak 

  ; PROCEDURE BuildNode1565_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1565_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1565_FsChildPlain 

  ; PROCEDURE BuildNode1563_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1563_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1565_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1563_FsFixedChildList 

  ; PROCEDURE BuildNode1561_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1561_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1563_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1561_FsCondMember 

  ; PROCEDURE BuildNode1551_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1551_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1561_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1559_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1552_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1551_FsFixedChildList 

  ; PROCEDURE BuildNode1547_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1547_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1551_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1548_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1547_FsFixedHorizRule 

  ; PROCEDURE BuildNode1571_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1571_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1571_IdentPlusList 

  ; PROCEDURE BuildNode1577_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1577_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1577_FsChildPlain 

  ; PROCEDURE BuildNode1576_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1576_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1577_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1576_FsFixedChildList 

  ; PROCEDURE BuildNode1575_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1575_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1576_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1575_FsCondPresent 

  ; PROCEDURE BuildNode1582_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1582_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1582_LineBreak 

  ; PROCEDURE BuildNode1589_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1589_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1589_FsChildPlain 

  ; PROCEDURE BuildNode1587_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1587_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1589_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1587_FsFixedChildList 

  ; PROCEDURE BuildNode1585_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1585_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1587_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1585_FsCondMember 

  ; PROCEDURE BuildNode1574_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1574_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1585_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1582_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1575_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1574_FsFixedChildList 

  ; PROCEDURE BuildNode1570_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1570_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1574_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1571_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1570_FsFixedHorizRule 

  ; PROCEDURE BuildNode1596_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1596_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1596_IdentPlusList 

  ; PROCEDURE BuildNode1600_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1600_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1600_FsChildPlain 

  ; PROCEDURE BuildNode1604_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1604_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1604_LineBreak 

  ; PROCEDURE BuildNode1611_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1611_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1611_FsChildPlain 

  ; PROCEDURE BuildNode1610_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1610_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1611_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1610_FsFixedChildList 

  ; PROCEDURE BuildNode1609_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1609_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1610_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1609_FsCondPresent 

  ; PROCEDURE BuildNode1616_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1616_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1616_LineBreak 

  ; PROCEDURE BuildNode1622_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1622_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1622_FsChildPlain 

  ; PROCEDURE BuildNode1620_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1620_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1622_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1620_FsFixedChildList 

  ; PROCEDURE BuildNode1618_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1618_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1620_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1618_FsCondMember 

  ; PROCEDURE BuildNode1608_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1608_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1618_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1616_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1609_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1608_FsFixedChildList 

  ; PROCEDURE BuildNode1607_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1607_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1608_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1607_FsHorizSubtree 

  ; PROCEDURE BuildNode1627_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1627_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1627_LineBreak 

  ; PROCEDURE BuildNode1599_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1599_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1627_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1607_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1604_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1600_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1599_FsFixedChildList 

  ; PROCEDURE BuildNode1595_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1595_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1599_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1596_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1595_FsFixedHorizRule 

  ; PROCEDURE BuildNode1631_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1631_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1631_IdentPlusList 

  ; PROCEDURE BuildNode1635_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1635_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1635_FsChildPlain 

  ; PROCEDURE BuildNode1639_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1639_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1639_LineBreak 

  ; PROCEDURE BuildNode1646_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1646_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1646_FsChildPlain 

  ; PROCEDURE BuildNode1645_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1645_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1646_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1645_FsFixedChildList 

  ; PROCEDURE BuildNode1644_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1644_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1645_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1644_FsCondPresent 

  ; PROCEDURE BuildNode1651_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1651_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1651_LineBreak 

  ; PROCEDURE BuildNode1657_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1657_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1657_FsChildPlain 

  ; PROCEDURE BuildNode1655_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1655_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1657_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1655_FsFixedChildList 

  ; PROCEDURE BuildNode1653_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1653_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1655_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1653_FsCondMember 

  ; PROCEDURE BuildNode1643_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1643_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1653_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1651_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1644_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1643_FsFixedChildList 

  ; PROCEDURE BuildNode1642_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1642_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1643_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1642_FsHorizSubtree 

  ; PROCEDURE BuildNode1662_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1662_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1662_LineBreak 

  ; PROCEDURE BuildNode1634_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1634_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1662_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1642_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1639_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1635_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1634_FsFixedChildList 

  ; PROCEDURE BuildNode1630_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1630_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1634_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1631_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1630_FsFixedHorizRule 

  ; PROCEDURE BuildNode1667_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1667_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1667_IdentPlusList 

  ; PROCEDURE BuildNode1671_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1671_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1671_FsChildPlain 

  ; PROCEDURE BuildNode1675_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1675_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1675_LineBreak 

  ; PROCEDURE BuildNode1678_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1678_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1678_FsChildPlain 

  ; PROCEDURE BuildNode1682_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1682_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1682_LineBreak 

  ; PROCEDURE BuildNode1670_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1670_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1682_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1678_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1675_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1671_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1670_FsFixedChildList 

  ; PROCEDURE BuildNode1666_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1666_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1670_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1667_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1666_FsFixedHorizRule 

  ; PROCEDURE BuildNode1686_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1686_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsCsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1686_IdentPlusList 

  ; PROCEDURE BuildNode1689_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1689_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1689_FsChildPlain 

  ; PROCEDURE BuildNode1693_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1693_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1693_LineBreak 

  ; PROCEDURE BuildNode1697_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1697_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1697_FsChildPlain 

  ; PROCEDURE BuildNode1701_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1701_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1701_LineBreak 

  ; PROCEDURE BuildNode1688_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1688_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1701_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1697_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1693_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1689_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1688_FsFixedChildList 

  ; PROCEDURE BuildNode1685_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1685_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1688_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1686_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1685_FsFixedHorizRule 

  ; PROCEDURE BuildNode1705_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1705_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1705_IdentPlusList 

  ; PROCEDURE BuildNode1708_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1708_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1708_FsChildPlain 

  ; PROCEDURE BuildNode1713_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1713_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1713_LineBreak 

  ; PROCEDURE BuildNode1712_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1712_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1713_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1712_FormatterList 

  ; PROCEDURE BuildNode1704_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1704_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1712_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1708_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1705_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1704_FsListHorizRule 

  ; PROCEDURE BuildNode1717_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1717_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1717_IdentPlusList 

  ; PROCEDURE BuildNode1723_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1723_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1723_FsChildPlain 

  ; PROCEDURE BuildNode1731_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1731_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1731_LineBreak 

  ; PROCEDURE BuildNode1734_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1734_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1734_FsChildPlain 

  ; PROCEDURE BuildNode1730_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1730_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1734_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1731_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1730_FsFixedChildList 

  ; PROCEDURE BuildNode1729_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1729_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1730_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1729_FsCondPresent 

  ; PROCEDURE BuildNode1728_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1728_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1729_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1728_FsFixedChildList 

  ; PROCEDURE BuildNode1727_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1727_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1728_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1727_FsHorizSubtree 

  ; PROCEDURE BuildNode1738_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1738_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1738_LineBreak 

  ; PROCEDURE BuildNode1741_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1741_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1741_FsChildPlain 

  ; PROCEDURE BuildNode1722_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1722_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1741_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1738_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1727_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1723_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1722_FsFixedChildList 

  ; PROCEDURE BuildNode1716_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1716_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1722_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1717_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1716_FsFixedHorizRule 

  ; PROCEDURE BuildNode1747_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1747_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1747_IdentPlusList 

  ; PROCEDURE BuildNode1750_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1750_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1750_FsChildPlain 

  ; PROCEDURE BuildNode1755_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1755_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1755_LineBreak 

  ; PROCEDURE BuildNode1754_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1754_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1755_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1754_FormatterList 

  ; PROCEDURE BuildNode1746_FsListFillRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1746_FsListFillRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListFillRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1754_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1750_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1747_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1746_FsListFillRule 

  ; PROCEDURE BuildNode1759_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1759_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1759_IdentPlusList 

  ; PROCEDURE BuildNode1763_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1763_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1763_FsChildPlain 

  ; PROCEDURE BuildNode1771_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1771_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1771_LineBreak 

  ; PROCEDURE BuildNode1774_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1774_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1774_FsChildPlain 

  ; PROCEDURE BuildNode1770_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1770_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1774_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1771_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1770_FsFixedChildList 

  ; PROCEDURE BuildNode1769_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1769_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1770_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1769_FsCondPresent 

  ; PROCEDURE BuildNode1768_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1768_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1769_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1768_FsFixedChildList 

  ; PROCEDURE BuildNode1767_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1767_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1768_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1767_FsHorizSubtree 

  ; PROCEDURE BuildNode1778_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1778_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1778_LineBreak 

  ; PROCEDURE BuildNode1781_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1781_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1781_FsChildPlain 

  ; PROCEDURE BuildNode1762_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1762_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1781_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1778_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1767_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1763_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1762_FsFixedChildList 

  ; PROCEDURE BuildNode1758_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1758_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1762_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1759_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1758_FsFixedHorizRule 

  ; PROCEDURE BuildNode1787_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1787_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1787_IdentPlusList 

  ; PROCEDURE BuildNode1794_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1794_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1794_FsChildPlain 

  ; PROCEDURE BuildNode1792_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1792_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1794_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1792_FsFixedChildList 

  ; PROCEDURE BuildNode1790_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1790_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1792_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1790_FsCondMember 

  ; PROCEDURE BuildNode1800_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1800_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1800_LineBreak 

  ; PROCEDURE BuildNode1799_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1799_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1800_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1799_FormatterList 

  ; PROCEDURE BuildNode1786_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1786_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1799_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1790_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1787_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1786_FsListHorizRule 

  ; PROCEDURE BuildNode1803_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1803_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Nil"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1803_IdentPlusList 

  ; PROCEDURE BuildNode1806_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1806_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NIL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1806_FsFixedChildList 

  ; PROCEDURE BuildNode1802_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1802_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1806_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1803_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1802_FsFixedHorizRule 

  ; PROCEDURE BuildNode1809_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1809_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1809_IdentPlusList 

  ; PROCEDURE BuildNode1813_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1813_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1813_FsChildPlain 

  ; PROCEDURE BuildNode1821_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1821_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1821_LineBreak 

  ; PROCEDURE BuildNode1824_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1824_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1824_FsChildPlain 

  ; PROCEDURE BuildNode1820_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1820_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1824_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1821_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1820_FsFixedChildList 

  ; PROCEDURE BuildNode1819_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1819_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1820_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1819_FsCondPresent 

  ; PROCEDURE BuildNode1818_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1818_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1819_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1818_FsFixedChildList 

  ; PROCEDURE BuildNode1817_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1817_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1818_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1817_FsHorizSubtree 

  ; PROCEDURE BuildNode1828_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1828_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1828_LineBreak 

  ; PROCEDURE BuildNode1833_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1833_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1833_FsChildPlain 

  ; PROCEDURE BuildNode1839_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1839_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "3"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1839_LineBreak 

  ; PROCEDURE BuildNode1842_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1842_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1842_FsChildPlain 

  ; PROCEDURE BuildNode1838_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1838_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1842_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1839_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1838_FsFixedChildList 

  ; PROCEDURE BuildNode1837_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1837_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1838_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1837_FsCondNonempty 

  ; PROCEDURE BuildNode1846_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1846_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1846_LineBreak 

  ; PROCEDURE BuildNode1832_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1832_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1846_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1837_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1833_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1832_FsFixedChildList 

  ; PROCEDURE BuildNode1831_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1831_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1832_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1831_FsHorizSubtree 

  ; PROCEDURE BuildNode1812_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1812_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1831_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1828_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1817_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1813_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1812_FsFixedChildList 

  ; PROCEDURE BuildNode1808_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1808_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1812_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1809_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1808_FsFixedHorizRule 

  ; PROCEDURE BuildNode1850_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1850_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1850_IdentPlusList 

  ; PROCEDURE BuildNode1854_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1854_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1854_FsChildPlain 

  ; PROCEDURE BuildNode1862_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1862_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1862_LineBreak 

  ; PROCEDURE BuildNode1865_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1865_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1865_FsChildPlain 

  ; PROCEDURE BuildNode1861_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1861_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1865_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1862_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1861_FsFixedChildList 

  ; PROCEDURE BuildNode1860_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1860_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1861_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1860_FsCondPresent 

  ; PROCEDURE BuildNode1859_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1859_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1860_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1859_FsFixedChildList 

  ; PROCEDURE BuildNode1858_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1858_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1859_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1858_FsHorizSubtree 

  ; PROCEDURE BuildNode1869_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1869_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1869_LineBreak 

  ; PROCEDURE BuildNode1874_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1874_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1874_FsChildPlain 

  ; PROCEDURE BuildNode1880_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1880_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "3"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1880_LineBreak 

  ; PROCEDURE BuildNode1883_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1883_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1883_FsChildPlain 

  ; PROCEDURE BuildNode1879_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1879_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1883_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1880_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1879_FsFixedChildList 

  ; PROCEDURE BuildNode1878_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1878_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1879_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1878_FsCondNonempty 

  ; PROCEDURE BuildNode1887_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1887_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1887_LineBreak 

  ; PROCEDURE BuildNode1873_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1873_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1887_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1878_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1874_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1873_FsFixedChildList 

  ; PROCEDURE BuildNode1872_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1872_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1873_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1872_FsHorizSubtree 

  ; PROCEDURE BuildNode1853_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1853_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1872_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1869_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1858_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1854_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1853_FsFixedChildList 

  ; PROCEDURE BuildNode1849_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1849_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1853_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1850_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1849_FsFixedHorizRule 

  ; PROCEDURE BuildNode1891_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1891_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPluralRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1891_IdentPlusList 

  ; PROCEDURE BuildNode1895_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1895_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1895_FsChildPlain 

  ; PROCEDURE BuildNode1903_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1903_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1903_LineBreak 

  ; PROCEDURE BuildNode1906_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1906_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1906_FsChildPlain 

  ; PROCEDURE BuildNode1902_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1902_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1906_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"BUILD\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1903_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1902_FsFixedChildList 

  ; PROCEDURE BuildNode1901_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1901_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1902_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1901_FsCondPresent 

  ; PROCEDURE BuildNode1900_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1900_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1901_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1900_FsFixedChildList 

  ; PROCEDURE BuildNode1899_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1899_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1900_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1899_FsHorizSubtree 

  ; PROCEDURE BuildNode1910_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1910_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1910_LineBreak 

  ; PROCEDURE BuildNode1915_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1915_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1915_FsChildPlain 

  ; PROCEDURE BuildNode1921_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1921_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "3"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1921_LineBreak 

  ; PROCEDURE BuildNode1924_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1924_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1924_FsChildPlain 

  ; PROCEDURE BuildNode1920_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1920_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1924_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1921_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1920_FsFixedChildList 

  ; PROCEDURE BuildNode1919_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1919_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1920_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1919_FsCondNonempty 

  ; PROCEDURE BuildNode1928_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1928_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1928_LineBreak 

  ; PROCEDURE BuildNode1914_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1914_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1928_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1919_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1915_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1914_FsFixedChildList 

  ; PROCEDURE BuildNode1913_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1913_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1914_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1913_FsHorizSubtree 

  ; PROCEDURE BuildNode1894_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1894_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1913_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=++\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1910_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1899_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1895_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1894_FsFixedChildList 

  ; PROCEDURE BuildNode1890_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1890_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1894_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1891_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1890_FsFixedHorizRule 

  ; PROCEDURE BuildNode1932_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1932_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1932_IdentPlusList 

  ; PROCEDURE BuildNode1935_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1935_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1935_FsChildPlain 

  ; PROCEDURE BuildNode1931_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1931_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1935_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1932_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1931_FsListHorizRule 

  ; PROCEDURE BuildNode1941_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1941_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1941_IdentPlusList 

  ; PROCEDURE BuildNode1948_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1948_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1948_FsChildPlain 

  ; PROCEDURE BuildNode1952_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1952_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1952_LineBreak 

  ; PROCEDURE BuildNode1946_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1946_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1952_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1948_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1946_FsFixedChildList 

  ; PROCEDURE BuildNode1940_FsFixedVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1940_FsFixedVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1946_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1941_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1940_FsFixedVertRule 

  ; PROCEDURE BuildNode1956_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1956_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1956_IdentPlusList 

  ; PROCEDURE BuildNode1959_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1959_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1959_FsChildPlain 

  ; PROCEDURE BuildNode1955_FsListVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1955_FsListVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1959_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1956_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1955_FsListVertRule 

  ; PROCEDURE BuildNode1965_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1965_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1965_IdentPlusList 

  ; PROCEDURE BuildNode1970_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1970_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1970_FsChildPlain 

  ; PROCEDURE BuildNode1968_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1968_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1970_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1968_FsFixedChildList 

  ; PROCEDURE BuildNode1964_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1964_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1968_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1965_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1964_FsFixedHorizRule 

  ; PROCEDURE BuildNode1975_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1975_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1975_IdentPlusList 

  ; PROCEDURE BuildNode1979_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1979_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1979_FsChildPlain 

  ; PROCEDURE BuildNode1977_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1977_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1979_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1977_FsFixedChildList 

  ; PROCEDURE BuildNode1974_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1974_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1977_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1975_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1974_FsFixedHorizRule 

  ; PROCEDURE BuildNode1984_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1984_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1984_IdentPlusList 

  ; PROCEDURE BuildNode1988_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1988_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1988_FsChildPlain 

  ; PROCEDURE BuildNode1986_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1986_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1988_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1986_FsFixedChildList 

  ; PROCEDURE BuildNode1983_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1983_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1986_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1984_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1983_FsFixedHorizRule 

  ; PROCEDURE BuildNode1993_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1993_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1993_IdentPlusList 

  ; PROCEDURE BuildNode1999_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1999_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1999_FsChildPlain 

  ; PROCEDURE BuildNode2003_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2003_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2003_LineBreak 

  ; PROCEDURE BuildNode2006_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2006_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2006_FsChildPlain 

  ; PROCEDURE BuildNode2010_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2010_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2010_LineBreak 

  ; PROCEDURE BuildNode1998_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1998_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2010_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2006_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2003_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1999_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1998_FsFixedChildList 

  ; PROCEDURE BuildNode1992_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1992_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1998_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1993_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1992_FsFixedHorizRule 

  ; PROCEDURE BuildNode2014_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2014_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2014_IdentPlusList 

  ; PROCEDURE BuildNode2018_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2018_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2018_FsChildPlain 

  ; PROCEDURE BuildNode2022_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2022_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2022_LineBreak 

  ; PROCEDURE BuildNode2026_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2026_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2026_FsChildPlain 

  ; PROCEDURE BuildNode2030_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2030_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2030_LineBreak 

  ; PROCEDURE BuildNode2017_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2017_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2030_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2026_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2022_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2018_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2017_FsFixedChildList 

  ; PROCEDURE BuildNode2013_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2013_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2017_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2014_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2013_FsFixedHorizRule 

  ; PROCEDURE BuildNode2034_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2034_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2034_IdentPlusList 

  ; PROCEDURE BuildNode2038_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2038_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2038_FsChildPlain 

  ; PROCEDURE BuildNode2042_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2042_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2042_LineBreak 

  ; PROCEDURE BuildNode2046_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2046_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2046_FsChildPlain 

  ; PROCEDURE BuildNode2050_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2050_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2050_LineBreak 

  ; PROCEDURE BuildNode2037_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2037_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2050_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2046_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2042_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2038_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2037_FsFixedChildList 

  ; PROCEDURE BuildNode2033_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2033_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2037_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2034_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2033_FsFixedHorizRule 

  ; PROCEDURE BuildNode2054_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2054_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2054_IdentPlusList 

  ; PROCEDURE BuildNode2058_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2058_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2058_FsChildPlain 

  ; PROCEDURE BuildNode2062_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2062_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2062_LineBreak 

  ; PROCEDURE BuildNode2066_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2066_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2066_FsChildPlain 

  ; PROCEDURE BuildNode2070_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2070_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2070_LineBreak 

  ; PROCEDURE BuildNode2057_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2057_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2070_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2066_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2062_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2058_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2057_FsFixedChildList 

  ; PROCEDURE BuildNode2053_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2053_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2057_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2054_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2053_FsFixedHorizRule 

  ; PROCEDURE BuildNode2074_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2074_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsInlineRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2074_IdentPlusList 

  ; PROCEDURE BuildNode2079_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2079_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2079_FsChildPlain 

  ; PROCEDURE BuildNode2083_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2083_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2083_LineBreak 

  ; PROCEDURE BuildNode2086_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2086_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2086_FsChildPlain 

  ; PROCEDURE BuildNode2090_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2090_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2090_LineBreak 

  ; PROCEDURE BuildNode2077_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2077_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2090_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2086_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2083_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2079_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INLINE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2077_FsFixedChildList 

  ; PROCEDURE BuildNode2073_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2073_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2077_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2074_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2073_FsFixedHorizRule 

  ; PROCEDURE BuildNode2094_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2094_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2094_IdentPlusList 

  ; PROCEDURE BuildNode2097_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2097_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2097_FsChildPlain 

  ; PROCEDURE BuildNode2102_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2102_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2102_LineBreak 

  ; PROCEDURE BuildNode2101_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2101_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2102_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2101_FormatterList 

  ; PROCEDURE BuildNode2093_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2093_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2101_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2097_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2094_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2093_FsListHorizRule 

  ; PROCEDURE BuildNode2105_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2105_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2105_IdentPlusList 

  ; PROCEDURE BuildNode2108_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2108_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2108_FsChildPlain 

  ; PROCEDURE BuildNode2113_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2113_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2113_LineBreak 

  ; PROCEDURE BuildNode2112_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2112_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2113_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2112_FormatterList 

  ; PROCEDURE BuildNode2104_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2104_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2112_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2108_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2105_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2104_FsListHorizRule 

  ; PROCEDURE BuildNode2116_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2116_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2116_IdentPlusList 

  ; PROCEDURE BuildNode2119_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2119_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2119_FsFixedChildList 

  ; PROCEDURE BuildNode2115_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2115_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2119_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2116_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2115_FsFixedHorizRule 

  ; PROCEDURE BuildNode2122_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2122_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2122_IdentPlusList 

  ; PROCEDURE BuildNode2129_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2129_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2129_FsChildPlain 

  ; PROCEDURE BuildNode2128_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2128_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2129_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2128_FsFixedChildList 

  ; PROCEDURE BuildNode2127_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2127_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2128_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2127_FsCondPresent 

  ; PROCEDURE BuildNode2125_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2125_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2127_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2125_FsFixedChildList 

  ; PROCEDURE BuildNode2121_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2121_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2125_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2122_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2121_FsFixedHorizRule 

  ; PROCEDURE BuildNode2134_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2134_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2134_IdentPlusList 

  ; PROCEDURE BuildNode2140_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2140_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2140_FsChildPlain 

  ; PROCEDURE BuildNode2139_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2139_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2140_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2139_FsFixedChildList 

  ; PROCEDURE BuildNode2138_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2138_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2139_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2138_FsCondPresent 

  ; PROCEDURE BuildNode2136_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2136_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2138_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2136_FsFixedChildList 

  ; PROCEDURE BuildNode2133_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2133_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2136_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2134_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2133_FsFixedHorizRule 

  ; PROCEDURE BuildNode2145_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2145_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2145_IdentPlusList 

  ; PROCEDURE BuildNode2151_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2151_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2151_FsChildPlain 

  ; PROCEDURE BuildNode2150_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2150_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2151_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2150_FsFixedChildList 

  ; PROCEDURE BuildNode2149_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2149_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2150_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2149_FsCondPresent 

  ; PROCEDURE BuildNode2147_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2147_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2149_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2147_FsFixedChildList 

  ; PROCEDURE BuildNode2144_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2144_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2147_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2145_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2144_FsFixedHorizRule 

  ; PROCEDURE BuildNode2156_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2156_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2156_IdentPlusList 

  ; PROCEDURE BuildNode2161_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2161_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2161_FsChildPlain 

  ; PROCEDURE BuildNode2158_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2158_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2161_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2158_FsFixedChildList 

  ; PROCEDURE BuildNode2155_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2155_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2158_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2156_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2155_FsFixedHorizRule 

  ; PROCEDURE BuildNode2166_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2166_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2166_IdentPlusList 

  ; PROCEDURE BuildNode2171_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2171_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2171_FsChildPlain 

  ; PROCEDURE BuildNode2168_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2168_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2171_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2168_FsFixedChildList 

  ; PROCEDURE BuildNode2165_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2165_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2168_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2166_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2165_FsFixedHorizRule 

  ; PROCEDURE BuildNode2176_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2176_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosPlusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2176_IdentPlusList 

  ; PROCEDURE BuildNode2181_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2181_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2181_FsChildPlain 

  ; PROCEDURE BuildNode2178_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2178_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2181_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2178_FsFixedChildList 

  ; PROCEDURE BuildNode2175_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2175_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2178_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2176_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2175_FsFixedHorizRule 

  ; PROCEDURE BuildNode2186_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2186_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "BolMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2186_IdentPlusList 

  ; PROCEDURE BuildNode2191_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2191_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2191_FsChildPlain 

  ; PROCEDURE BuildNode2188_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2188_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2191_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"^\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2188_FsFixedChildList 

  ; PROCEDURE BuildNode2185_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2185_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2188_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2186_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2185_FsFixedHorizRule 

  ; PROCEDURE BuildNode2196_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2196_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ParentMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2196_IdentPlusList 

  ; PROCEDURE BuildNode2201_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2201_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2201_FsChildPlain 

  ; PROCEDURE BuildNode2198_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2198_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2201_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2198_FsFixedChildList 

  ; PROCEDURE BuildNode2195_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2195_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2198_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2196_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2195_FsFixedHorizRule 

  ; PROCEDURE BuildNode2206_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2206_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PosMinusIndenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2206_IdentPlusList 

  ; PROCEDURE BuildNode2211_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2211_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2211_FsChildPlain 

  ; PROCEDURE BuildNode2208_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2208_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2211_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"-\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"$\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2208_FsFixedChildList 

  ; PROCEDURE BuildNode2205_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2205_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2208_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2206_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2205_FsFixedHorizRule 

  ; PROCEDURE BuildNode2216_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2216_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2216_IdentPlusList 

  ; PROCEDURE BuildNode2221_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2221_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2221_FsChildPlain 

  ; PROCEDURE BuildNode2225_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2225_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2225_LineBreak 

  ; PROCEDURE BuildNode2219_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2219_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2225_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2221_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2219_FsFixedChildList 

  ; PROCEDURE BuildNode2215_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2215_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2219_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2216_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2215_FsFixedHorizRule 

  ; PROCEDURE BuildNode2229_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2229_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2229_IdentPlusList 

  ; PROCEDURE BuildNode2233_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2233_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2233_LineBreak 

  ; PROCEDURE BuildNode2239_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2239_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2239_FsChildPlain 

  ; PROCEDURE BuildNode2243_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2243_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2243_LineBreak 

  ; PROCEDURE BuildNode2237_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2237_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2243_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2239_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2237_FsFixedChildList 

  ; PROCEDURE BuildNode2235_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2235_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2237_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2235_FsCondMember 

  ; PROCEDURE BuildNode2231_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2231_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2235_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2233_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2231_FsFixedChildList 

  ; PROCEDURE BuildNode2228_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2228_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2231_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2229_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2228_FsFixedHorizRule 

  ; PROCEDURE BuildNode2247_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2247_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2247_IdentPlusList 

  ; PROCEDURE BuildNode2251_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2251_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2251_LineBreak 

  ; PROCEDURE BuildNode2257_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2257_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2257_FsChildPlain 

  ; PROCEDURE BuildNode2261_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2261_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2261_LineBreak 

  ; PROCEDURE BuildNode2255_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2255_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2261_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2257_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2255_FsFixedChildList 

  ; PROCEDURE BuildNode2253_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2253_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2255_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2253_FsCondMember 

  ; PROCEDURE BuildNode2249_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2249_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2253_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2251_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2249_FsFixedChildList 

  ; PROCEDURE BuildNode2246_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2246_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2249_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2247_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2246_FsFixedHorizRule 

  ; PROCEDURE BuildNode2265_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2265_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2265_IdentPlusList 

  ; PROCEDURE BuildNode2269_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2269_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2269_LineBreak 

  ; PROCEDURE BuildNode2275_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2275_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtreeChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2275_FsChildPlain 

  ; PROCEDURE BuildNode2279_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2279_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2279_LineBreak 

  ; PROCEDURE BuildNode2273_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2273_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2279_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2275_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2273_FsFixedChildList 

  ; PROCEDURE BuildNode2271_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2271_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2273_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2271_FsCondMember 

  ; PROCEDURE BuildNode2267_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2267_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2271_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2269_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2267_FsFixedChildList 

  ; PROCEDURE BuildNode2264_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2264_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2267_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2265_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2264_FsFixedHorizRule 

  ; PROCEDURE BuildNode2283_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2283_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2283_IdentPlusList 

  ; PROCEDURE BuildNode2289_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2289_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2289_FsChildPlain 

  ; PROCEDURE BuildNode2288_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2288_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2289_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2288_FsFixedChildList 

  ; PROCEDURE BuildNode2287_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2287_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2288_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2287_FsCondPresent 

  ; PROCEDURE BuildNode2294_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2294_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2294_LineBreak 

  ; PROCEDURE BuildNode2299_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2299_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Indenter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2299_FsChildPlain 

  ; PROCEDURE BuildNode2297_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2297_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2299_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"INDENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2297_FsFixedChildList 

  ; PROCEDURE BuildNode2296_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2296_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2297_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2296_FsCondPresent 

  ; PROCEDURE BuildNode2303_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2303_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2303_LineBreak 

  ; PROCEDURE BuildNode2309_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2309_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2309_FsChildPlain 

  ; PROCEDURE BuildNode2307_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2307_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2309_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2307_FsFixedChildList 

  ; PROCEDURE BuildNode2305_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2305_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2307_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2305_FsCondMember 

  ; PROCEDURE BuildNode2286_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2286_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2305_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2303_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2296_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2294_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2287_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2286_FsFixedChildList 

  ; PROCEDURE BuildNode2282_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2282_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2286_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2283_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2282_FsFixedHorizRule 

  ; PROCEDURE BuildNode2315_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2315_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2315_IdentPlusList 

  ; PROCEDURE BuildNode2318_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2318_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2318_FsFixedChildList 

  ; PROCEDURE BuildNode2314_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2314_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2318_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2315_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2314_FsFixedHorizRule 

  ; PROCEDURE BuildNode2321_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2321_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondAbsent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2321_IdentPlusList 

  ; PROCEDURE BuildNode2326_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2326_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2326_LineBreak 

  ; PROCEDURE BuildNode2329_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2329_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2329_FsChildPlain 

  ; PROCEDURE BuildNode2333_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2333_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2333_LineBreak 

  ; PROCEDURE BuildNode2324_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2324_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2333_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2329_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2326_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ABSENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2324_FsFixedChildList 

  ; PROCEDURE BuildNode2320_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2320_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2324_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2321_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2320_FsFixedHorizRule 

  ; PROCEDURE BuildNode2337_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2337_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2337_IdentPlusList 

  ; PROCEDURE BuildNode2341_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2341_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2341_LineBreak 

  ; PROCEDURE BuildNode2344_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2344_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2344_FsChildPlain 

  ; PROCEDURE BuildNode2348_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2348_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2348_LineBreak 

  ; PROCEDURE BuildNode2339_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2339_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2348_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2344_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2341_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2339_FsFixedChildList 

  ; PROCEDURE BuildNode2336_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2336_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2339_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2337_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2336_FsFixedHorizRule 

  ; PROCEDURE BuildNode2352_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2352_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondEmpty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2352_IdentPlusList 

  ; PROCEDURE BuildNode2356_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2356_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2356_LineBreak 

  ; PROCEDURE BuildNode2359_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2359_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2359_FsChildPlain 

  ; PROCEDURE BuildNode2363_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2363_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2363_LineBreak 

  ; PROCEDURE BuildNode2354_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2354_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2363_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2359_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2356_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"EMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2354_FsFixedChildList 

  ; PROCEDURE BuildNode2351_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2351_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2354_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2352_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2351_FsFixedHorizRule 

  ; PROCEDURE BuildNode2367_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2367_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2367_IdentPlusList 

  ; PROCEDURE BuildNode2371_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2371_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2371_LineBreak 

  ; PROCEDURE BuildNode2374_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2374_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2374_FsChildPlain 

  ; PROCEDURE BuildNode2378_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2378_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2378_LineBreak 

  ; PROCEDURE BuildNode2369_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2369_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2378_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2374_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2371_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2369_FsFixedChildList 

  ; PROCEDURE BuildNode2366_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2366_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2369_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2367_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2366_FsFixedHorizRule 

  ; PROCEDURE BuildNode2382_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2382_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2382_IdentPlusList 

  ; PROCEDURE BuildNode2386_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2386_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2386_LineBreak 

  ; PROCEDURE BuildNode2389_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2389_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2389_FsChildPlain 

  ; PROCEDURE BuildNode2393_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2393_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2393_LineBreak 

  ; PROCEDURE BuildNode2384_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2384_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2393_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2389_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2386_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2384_FsFixedChildList 

  ; PROCEDURE BuildNode2381_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2381_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2384_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2382_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2381_FsFixedHorizRule 

  ; PROCEDURE BuildNode2397_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2397_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonplural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2397_IdentPlusList 

  ; PROCEDURE BuildNode2401_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2401_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2401_LineBreak 

  ; PROCEDURE BuildNode2404_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2404_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2404_FsChildPlain 

  ; PROCEDURE BuildNode2408_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2408_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2408_LineBreak 

  ; PROCEDURE BuildNode2399_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2399_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2408_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2404_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2401_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONPLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2399_FsFixedChildList 

  ; PROCEDURE BuildNode2396_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2396_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2399_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2397_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2396_FsFixedHorizRule 

  ; PROCEDURE BuildNode2412_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2412_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2412_IdentPlusList 

  ; PROCEDURE BuildNode2416_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2416_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2416_FsChildPlain 

  ; PROCEDURE BuildNode2420_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2420_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2420_LineBreak 

  ; PROCEDURE BuildNode2423_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2423_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2423_FsChildPlain 

  ; PROCEDURE BuildNode2427_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2427_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2427_LineBreak 

  ; PROCEDURE BuildNode2414_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2414_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2427_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2423_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2420_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2416_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2414_FsFixedChildList 

  ; PROCEDURE BuildNode2411_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2411_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2414_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2412_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2411_FsFixedHorizRule 

  ; PROCEDURE BuildNode2431_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2431_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2431_IdentPlusList 

  ; PROCEDURE BuildNode2434_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2434_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2434_FsChildPlain 

  ; PROCEDURE BuildNode2439_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2439_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2439_LineBreak 

  ; PROCEDURE BuildNode2438_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2438_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2439_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2438_FormatterList 

  ; PROCEDURE BuildNode2430_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2430_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2438_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2434_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2431_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2430_FsListHorizRule 

  ; PROCEDURE BuildNode2443_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2443_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCase"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2443_IdentPlusList 

  ; PROCEDURE BuildNode2448_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2448_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2448_FsChildPlain 

  ; PROCEDURE BuildNode2452_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2452_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2452_LineBreak 

  ; PROCEDURE BuildNode2455_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2455_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondFmtList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2455_FsChildPlain 

  ; PROCEDURE BuildNode2461_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2461_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2461_LineBreak 

  ; PROCEDURE BuildNode2464_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2464_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2464_FsChildPlain 

  ; PROCEDURE BuildNode2460_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2460_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2464_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"ELSE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2461_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2460_FsFixedChildList 

  ; PROCEDURE BuildNode2459_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2459_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2460_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2459_FsCondNonempty 

  ; PROCEDURE BuildNode2468_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2468_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2468_LineBreak 

  ; PROCEDURE BuildNode2446_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2446_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2468_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2459_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2455_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"OF\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2452_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2448_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"CASE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2446_FsFixedChildList 

  ; PROCEDURE BuildNode2442_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2442_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2446_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2443_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2442_FsFixedHorizRule 

  ; PROCEDURE BuildNode2472_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2472_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2472_IdentPlusList 

  ; PROCEDURE BuildNode2476_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2476_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2476_FsChildPlain 

  ; PROCEDURE BuildNode2482_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2482_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2482_LineBreak 

  ; PROCEDURE BuildNode2487_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2487_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "4"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2487_LineBreak 

  ; PROCEDURE BuildNode2489_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2489_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2489_FsChildPlain 

  ; PROCEDURE BuildNode2496_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2496_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2496_FsChildPlain 

  ; PROCEDURE BuildNode2494_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2494_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2496_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2494_FsFixedChildList 

  ; PROCEDURE BuildNode2493_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2493_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2494_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2493_FsCondNonempty 

  ; PROCEDURE BuildNode2486_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2486_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2493_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2489_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2487_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2486_FsFixedChildList 

  ; PROCEDURE BuildNode2485_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2485_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2486_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2485_FsHorizSubtree 

  ; PROCEDURE BuildNode2481_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2481_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2485_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2482_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2481_FsFixedChildList 

  ; PROCEDURE BuildNode2480_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2480_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2481_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2480_FsHorizSubtree 

  ; PROCEDURE BuildNode2500_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2500_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2500_LineBreak 

  ; PROCEDURE BuildNode2475_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2475_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2500_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2480_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2476_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2475_FsFixedChildList 

  ; PROCEDURE BuildNode2471_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2471_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2475_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2472_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2471_FsFixedHorizRule 

  ; PROCEDURE BuildNode2504_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2504_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2504_IdentPlusList 

  ; PROCEDURE BuildNode2508_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2508_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2508_FsChildPlain 

  ; PROCEDURE BuildNode2514_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2514_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2514_LineBreak 

  ; PROCEDURE BuildNode2520_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2520_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "4"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2520_LineBreak 

  ; PROCEDURE BuildNode2522_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2522_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2522_FsChildPlain 

  ; PROCEDURE BuildNode2529_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2529_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2529_FsChildPlain 

  ; PROCEDURE BuildNode2527_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2527_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2529_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2527_FsFixedChildList 

  ; PROCEDURE BuildNode2526_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2526_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2527_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2526_FsCondNonempty 

  ; PROCEDURE BuildNode2519_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2519_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2526_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2522_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2520_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2519_FsFixedChildList 

  ; PROCEDURE BuildNode2518_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2518_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2519_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2518_FsHorizSubtree 

  ; PROCEDURE BuildNode2513_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2513_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2518_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2514_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2513_FsFixedChildList 

  ; PROCEDURE BuildNode2512_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2512_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2513_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2512_FsHorizSubtree 

  ; PROCEDURE BuildNode2533_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2533_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2533_LineBreak 

  ; PROCEDURE BuildNode2507_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2507_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2533_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2512_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2508_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2507_FsFixedChildList 

  ; PROCEDURE BuildNode2503_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2503_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2507_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2504_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2503_FsFixedHorizRule 

  ; PROCEDURE BuildNode2537_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2537_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2537_IdentPlusList 

  ; PROCEDURE BuildNode2541_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2541_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2541_FsChildPlain 

  ; PROCEDURE BuildNode2547_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2547_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2547_LineBreak 

  ; PROCEDURE BuildNode2553_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2553_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "4"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2553_LineBreak 

  ; PROCEDURE BuildNode2555_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2555_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2555_FsChildPlain 

  ; PROCEDURE BuildNode2562_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2562_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2562_FsChildPlain 

  ; PROCEDURE BuildNode2560_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2560_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2562_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2560_FsFixedChildList 

  ; PROCEDURE BuildNode2559_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2559_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2560_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2559_FsCondNonempty 

  ; PROCEDURE BuildNode2552_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2552_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2559_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2555_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2553_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2552_FsFixedChildList 

  ; PROCEDURE BuildNode2551_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2551_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2552_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2551_FsHorizSubtree 

  ; PROCEDURE BuildNode2546_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2546_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2551_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2547_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2546_FsFixedChildList 

  ; PROCEDURE BuildNode2545_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2545_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2546_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2545_FsHorizSubtree 

  ; PROCEDURE BuildNode2566_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2566_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2566_LineBreak 

  ; PROCEDURE BuildNode2540_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2540_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2566_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2545_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2541_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2540_FsFixedChildList 

  ; PROCEDURE BuildNode2536_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2536_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2540_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2537_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2536_FsFixedHorizRule 

  ; PROCEDURE BuildNode2570_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2570_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2570_IdentPlusList 

  ; PROCEDURE BuildNode2574_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2574_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2574_FsChildPlain 

  ; PROCEDURE BuildNode2580_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2580_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2580_LineBreak 

  ; PROCEDURE BuildNode2586_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2586_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "4"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2586_LineBreak 

  ; PROCEDURE BuildNode2588_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2588_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2588_FsChildPlain 

  ; PROCEDURE BuildNode2595_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2595_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2595_FsChildPlain 

  ; PROCEDURE BuildNode2593_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2593_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2595_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2593_FsFixedChildList 

  ; PROCEDURE BuildNode2592_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2592_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2593_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2592_FsCondNonempty 

  ; PROCEDURE BuildNode2585_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2585_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2592_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2588_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2586_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2585_FsFixedChildList 

  ; PROCEDURE BuildNode2584_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2584_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2585_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2584_FsHorizSubtree 

  ; PROCEDURE BuildNode2579_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2579_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2584_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->*\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2580_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2579_FsFixedChildList 

  ; PROCEDURE BuildNode2578_FsHorizSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2578_FsHorizSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsHorizSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2579_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2578_FsHorizSubtree 

  ; PROCEDURE BuildNode2599_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2599_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2599_LineBreak 

  ; PROCEDURE BuildNode2573_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2573_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2599_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2578_FsHorizSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2574_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2573_FsFixedChildList 

  ; PROCEDURE BuildNode2569_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode2569_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2573_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2570_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode2569_FsFixedHorizRule 

  ; PROCEDURE BuildNode8_RuleList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode8_RuleList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . RuleList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2569_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2536_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2503_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2471_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2442_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2430_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2411_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2396_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2381_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2366_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2351_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2336_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2320_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2314_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2282_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2264_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2246_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2228_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2215_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2205_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2195_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2185_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2175_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2165_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2155_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2144_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2133_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2121_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2115_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2104_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2093_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2073_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2053_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2033_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode2013_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1992_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1983_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1974_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1964_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1955_FsListVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1940_FsFixedVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1931_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1890_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1849_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1808_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1802_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1786_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1758_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1746_FsListFillRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1716_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1704_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1685_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1666_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1630_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1595_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1570_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1547_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1535_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1516_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1501_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1489_FsListFillRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1465_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1454_FsListVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1442_FsListFillRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1408_FsFixedVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1397_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1386_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1375_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1364_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1352_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1346_CsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1338_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1331_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1324_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1317_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1310_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1303_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1295_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1283_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1272_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1267_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1262_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1256_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1249_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1242_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1235_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1228_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1222_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1216_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1210_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1204_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1198_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1192_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1186_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1180_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1173_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1168_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1163_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1158_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1153_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1144_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1136_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1128_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1120_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1110_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1105_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1100_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1094_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1089_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1080_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1075_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1070_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1057_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1044_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1030_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1016_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1010_CsAltRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1005_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode994_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode988_CsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode975_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode969_CsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode961_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode953_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode941_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode930_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode918_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode907_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode896_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode886_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode877_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode869_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode863_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode855_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode846_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode840_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode828_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode823_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode817_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode801_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode784_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode776_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode762_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode751_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode738_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode732_AsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode721_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode717_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode712_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode706_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode692_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode684_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode673_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode667_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode659_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode646_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode636_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode623_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode619_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode611_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode605_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode597_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode591_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode580_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode566_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode558_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode549_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode539_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode532_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode526_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode516_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode512_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode505_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode499_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode480_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode473_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode468_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode462_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode456_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode450_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode436_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode430_AsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode416_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode407_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode401_AsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode389_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode374_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode368_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode362_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode350_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode344_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode338_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode327_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode319_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode308_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode302_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode289_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode280_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode274_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode271_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode268_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode265_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode259_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode242_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode235_StartRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode231_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode227_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode223_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode219_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode215_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode211_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode207_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode203_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode199_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode195_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode191_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode187_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode183_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode179_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode174_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode170_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode166_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode162_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode158_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode154_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode150_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode146_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode142_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode138_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode134_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode130_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode126_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode122_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode118_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode114_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode110_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode106_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode102_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode98_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode94_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode90_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode86_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode82_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode78_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode74_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode70_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode66_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode62_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode58_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode54_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode50_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode46_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode42_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode38_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode34_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode30_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode26_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode22_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode18_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode14_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode9_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode8_RuleList 

  ; PROCEDURE BuildNode0_LanguageDefinition ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode0_LanguageDefinition *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LanguageDefinition
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ldl1"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode8_RuleList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ldl1"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "*)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   second bootstrap version, expressed in itself."
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   Specification of the Language Definition Language (LDL),"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntBolFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Scheutz semantic editor. "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode0_LanguageDefinition 

  
  ; BEGIN (* Root *) 
      RETURN BuildNode0_LanguageDefinition ( ) 
    END Root 

; BEGIN (* Ldl1MakeEst *) 
  END Ldl1MakeEst 
. 

