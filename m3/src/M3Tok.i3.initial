
(* -----------------------------------------------------------------------1- *)
(* This file is part of the Scheutz semantic editor.                         *)
(* Copyright 1988..2007, Rodney M. Bates.                                    *)
(* rodney.bates@wichita.edu                                                  *)
(* Licensed under the Gnu Public License, version 2 or later.                *)
(* -----------------------------------------------------------------------2- *)


(* INTERFACE M3Tok, Ldl tokens, mechanically generated by LdlSemantics. 
     Generated on:  2004/06/07 18:56:54 GMT
     Language    Scheutz Language Definition Language M3
     Version     0.0.0.0
     Date        2004/06/07 18:56:53 GMT
     Fingerprint 25d4ec6187513783
*) 

INTERFACE M3Tok 

; IMPORT LbeStd  

(* Names for string tokens: *) 
; CONST RwAND_Tok = 24 (* = "AND" *) 
; CONST RwANY_Tok = 25 (* = "ANY" *) 
; CONST RwARRAY_Tok = 26 (* = "ARRAY" *) 
; CONST RwAS_Tok = 27 (* = "AS" *) 
; CONST RwBEGIN_Tok = 28 (* = "BEGIN" *) 
; CONST RwBITS_Tok = 29 (* = "BITS" *) 
; CONST RwBRANDED_Tok = 30 (* = "BRANDED" *) 
; CONST RwBY_Tok = 31 (* = "BY" *) 
; CONST RwCASE_Tok = 32 (* = "CASE" *) 
; CONST RwCONST_Tok = 33 (* = "CONST" *) 
; CONST RwDIV_Tok = 34 (* = "DIV" *) 
; CONST RwDO_Tok = 35 (* = "DO" *) 
; CONST RwELSE_Tok = 36 (* = "ELSE" *) 
; CONST RwELSIF_Tok = 37 (* = "ELSIF" *) 
; CONST RwEND_Tok = 38 (* = "END" *) 
; CONST RwEVAL_Tok = 39 (* = "EVAL" *) 
; CONST RwEXCEPT_Tok = 40 (* = "EXCEPT" *) 
; CONST RwEXCEPTION_Tok = 41 (* = "EXCEPTION" *) 
; CONST RwEXIT_Tok = 42 (* = "EXIT" *) 
; CONST RwEXPORTS_Tok = 43 (* = "EXPORTS" *) 
; CONST RwFINALLY_Tok = 44 (* = "FINALLY" *) 
; CONST RwFOR_Tok = 45 (* = "FOR" *) 
; CONST RwFROM_Tok = 46 (* = "FROM" *) 
; CONST RwGENERIC_Tok = 47 (* = "GENERIC" *) 
; CONST RwIF_Tok = 48 (* = "IF" *) 
; CONST RwIMPORT_Tok = 49 (* = "IMPORT" *) 
; CONST RwIN_Tok = 50 (* = "IN" *) 
; CONST RwINTERFACE_Tok = 51 (* = "INTERFACE" *) 
; CONST RwLOCK_Tok = 52 (* = "LOCK" *) 
; CONST RwLOOP_Tok = 53 (* = "LOOP" *) 
; CONST RwMETHODS_Tok = 54 (* = "METHODS" *) 
; CONST RwMOD_Tok = 55 (* = "MOD" *) 
; CONST RwMODULE_Tok = 56 (* = "MODULE" *) 
; CONST RwNOT_Tok = 57 (* = "NOT" *) 
; CONST RwOBJECT_Tok = 58 (* = "OBJECT" *) 
; CONST RwOF_Tok = 59 (* = "OF" *) 
; CONST RwOR_Tok = 60 (* = "OR" *) 
; CONST RwOVERRIDES_Tok = 61 (* = "OVERRIDES" *) 
; CONST RwPROCEDURE_Tok = 62 (* = "PROCEDURE" *) 
; CONST RwRAISE_Tok = 63 (* = "RAISE" *) 
; CONST RwRAISES_Tok = 64 (* = "RAISES" *) 
; CONST RwREADONLY_Tok = 65 (* = "READONLY" *) 
; CONST RwRECORD_Tok = 66 (* = "RECORD" *) 
; CONST RwREF_Tok = 67 (* = "REF" *) 
; CONST RwREPEAT_Tok = 68 (* = "REPEAT" *) 
; CONST RwRETURN_Tok = 69 (* = "RETURN" *) 
; CONST RwREVEAL_Tok = 70 (* = "REVEAL" *) 
; CONST RwROOT_Tok = 71 (* = "ROOT" *) 
; CONST RwSET_Tok = 72 (* = "SET" *) 
; CONST RwTHEN_Tok = 73 (* = "THEN" *) 
; CONST RwTO_Tok = 74 (* = "TO" *) 
; CONST RwTRY_Tok = 75 (* = "TRY" *) 
; CONST RwTYPE_Tok = 76 (* = "TYPE" *) 
; CONST RwTYPECASE_Tok = 77 (* = "TYPECASE" *) 
; CONST RwUNSAFE_Tok = 78 (* = "UNSAFE" *) 
; CONST RwUNTIL_Tok = 79 (* = "UNTIL" *) 
; CONST RwUNTRACED_Tok = 80 (* = "UNTRACED" *) 
; CONST RwVALUE_Tok = 81 (* = "VALUE" *) 
; CONST RwVAR_Tok = 82 (* = "VAR" *) 
; CONST RwWHILE_Tok = 83 (* = "WHILE" *) 
; CONST RwWITH_Tok = 84 (* = "WITH" *) 
; CONST Semicolon_Tok = 85 (* = ";" *) 
; CONST Dot_Tok = 86 (* = "." *) 
; CONST Equal_Tok = 87 (* = "=" *) 
; CONST OpenParen_Tok = 88 (* = "(" *) 
; CONST CloseParen_Tok = 89 (* = ")" *) 
; CONST Comma_Tok = 90 (* = "," *) 
; CONST Colon_Tok = 91 (* = ":" *) 
; CONST Subtype_Tok = 92 (* = "<:" *) 
; CONST Becomes_Tok = 93 (* = ":=" *) 
; CONST OpenBrace_Tok = 94 (* = "{" *) 
; CONST CloseBrace_Tok = 95 (* = "}" *) 
; CONST Stroke_Tok = 96 (* = "|" *) 
; CONST Arrow_Tok = 97 (* = "=>" *) 
; CONST Ellipsis_Tok = 98 (* = ".." *) 
; CONST OpenBracket_Tok = 99 (* = "[" *) 
; CONST CloseBracket_Tok = 100 (* = "]" *) 
; CONST Unequal_Tok = 101 (* = "#" *) 
; CONST Less_Tok = 102 (* = "<" *) 
; CONST Greater_Tok = 103 (* = ">" *) 
; CONST LessEqual_Tok = 104 (* = "<=" *) 
; CONST GreaterEqual_Tok = 105 (* = ">=" *) 
; CONST Plus_Tok = 106 (* = "+" *) 
; CONST Minus_Tok = 107 (* = "-" *) 
; CONST Ampersand_Tok = 108 (* = "&" *) 
; CONST Star_Tok = 109 (* = "*" *) 
; CONST Slash_Tok = 110 (* = "/" *) 
; CONST Deref_Tok = 111 (* = "^" *) 

(* Variable terminal tokens: *) 
; CONST Id = 112
; CONST TextLit = 113
; CONST CharLit = 114
; CONST Number = 115

(* Tokens for ModTok nodes for variable terminals: *) 
(* Id_ModTok = 116 *)
(* TextLit_ModTok = 117 *)
(* CharLit_ModTok = 118 *)
(* Number_ModTok = 119 *)

(* Abstract Plus Nodes: *) 
; CONST AsASImportList = 120
; CONST AsAltLabelPlusList = 121
; CONST AsIfThenPlusList = 122
; CONST AsTypePlusList = 123
; CONST AsEqualBindingPlusList = 124
; CONST AsExprPlusList = 125
; CONST AsIdPlusList = 126
; CONST AsQualIdPlusList = 127

(* Abstract Star Nodes: *) 
; CONST AsImportList = 128
; CONST AsDeclList = 129
; CONST AsConstDeclList = 130
; CONST AsTypeDeclList = 131
; CONST AsExceptionDeclList = 132
; CONST AsVarDeclList = 133
; CONST AsRevelationList = 134
; CONST AsFormalList = 135
; CONST AsStmtList = 136
; CONST AsActualList = 137
; CONST AsCaseAltList = 138
; CONST AsTypecaseAltList = 139
; CONST AsHandlerList = 140
; CONST AsFieldDeclList = 141
; CONST AsMethodList = 142
; CONST AsOverrideList = 143
; CONST AsConstructorElemList = 144
; CONST AsQualIdList = 145

(* Abstract Fixed Nodes: *) 
; CONST AsInterface = 146
; CONST AsInstInterface = 147
; CONST AsModule = 148
; CONST AsInstModule = 149
; CONST AsGenInterface = 150
; CONST AsGenModule = 151
; CONST AsASItem = 152
; CONST AsFROMImport = 153
; CONST AsUnsafe = 154
; CONST AsBlock = 155
; CONST AsConstDecl = 156
; CONST AsPlainTypeDecl = 157
; CONST AsOpaqueTypeDecl = 158
; CONST AsExceptionDecl = 159
; CONST AsVarDecl = 160
; CONST AsDefaultFormal = 161
; CONST AsValueFormal = 162
; CONST AsVarFormal = 163
; CONST AsReadonlyFormal = 164
; CONST AsFieldDecl = 165
; CONST AsProcInterfaceDecl = 166
; CONST AsProcBodyDecl = 167
; CONST AsPartialRevelation = 168
; CONST AsFullRevelation = 169
; CONST AsSignature = 170
; CONST AsProcType = 171
; CONST AsRaisesAny = 172
; CONST AsRaisesList = 173
; CONST AsEmptyStmt = 174
; CONST AsAssignStmt = 175
; CONST AsCallStmt = 176
; CONST AsFuncCall = 177
; CONST AsEqualBinding = 178
; CONST AsColonEqualBinding = 179
; CONST AsCaseStmt = 180
; CONST AsCaseStmtStroke = 181
; CONST AsCaseAlt = 182
; CONST AsRange = 183
; CONST AsExitStmt = 184
; CONST AsEvalStmt = 185
; CONST AsForStmt = 186
; CONST AsIfStmt = 187
; CONST AsIfThen = 188
; CONST AsLockStmt = 189
; CONST AsWhileStmt = 190
; CONST AsRaiseStmt = 191
; CONST AsRepeatStmt = 192
; CONST AsReturnStmt = 193
; CONST AsTypecaseStmt = 194
; CONST AsTypecaseStmtStroke = 195
; CONST AsTypecaseAlt = 196
; CONST AsTryExceptStmt = 197
; CONST AsTryExceptStmtStroke = 198
; CONST AsHandler = 199
; CONST AsTryFinallyStmt = 200
; CONST AsWithStmt = 201
; CONST AsLoopStmt = 202
; CONST AsROOT = 203
; CONST AsUNTRACEDROOT = 204
; CONST AsFixedArrayType = 205
; CONST AsOpenArrayType = 206
; CONST AsPackedType = 207
; CONST AsEnumType = 208
; CONST AsObjectType = 209
; CONST AsMethod = 210
; CONST AsRecordType = 211
; CONST AsUntracedRefType = 212
; CONST AsTracedRefType = 213
; CONST AsSetType = 214
; CONST AsSubrangeType = 215
; CONST AsBrand = 216
; CONST AsExplicitParens = 217
; CONST AsAnd = 218
; CONST AsOr = 219
; CONST AsEqual = 220
; CONST AsUnequal = 221
; CONST AsLess = 222
; CONST AsLessOrEqual = 223
; CONST AsGreater = 224
; CONST AsGreaterOrEqual = 225
; CONST AsIn = 226
; CONST AsPlus = 227
; CONST AsMinus = 228
; CONST AsAmpersand = 229
; CONST AsTimes = 230
; CONST AsSlash = 231
; CONST AsDiv = 232
; CONST AsMod = 233
; CONST AsDot = 234
; CONST AsNot = 235
; CONST AsUnaryPlus = 236
; CONST AsUnaryMinus = 237
; CONST AsDeref = 238
; CONST AsSubscript = 239
; CONST AsConstructor = 240
; CONST AsEllipsis = 241
; CONST AsIdDotId = 242

(* Sublist Tokens: *) 
(* AsImportList_%Sublist = 243, Sublist nonterminal for AsImportList *) 
(* AsASImportList_%Sublist = 244, Sublist nonterminal for AsASImportList *) 
(* AsDeclList_%Sublist = 245, Sublist nonterminal for AsDeclList *) 
(* AsConstDeclList_%Sublist = 246, Sublist nonterminal for AsConstDeclList *) 
(* AsTypeDeclList_%Sublist = 247, Sublist nonterminal for AsTypeDeclList *) 
(* AsExceptionDeclList_%Sublist = 248, Sublist nonterminal for AsExceptionDeclList *) 
(* AsVarDeclList_%Sublist = 249, Sublist nonterminal for AsVarDeclList *) 
(* AsRevelationList_%Sublist = 250, Sublist nonterminal for AsRevelationList *) 
(* AsFormalList_%Sublist = 251, Sublist nonterminal for AsFormalList *) 
(* AsStmtList_%Sublist = 252, Sublist nonterminal for AsStmtList *) 
(* AsActualList_%Sublist = 253, Sublist nonterminal for AsActualList *) 
(* AsCaseAltList_%Sublist = 254, Sublist nonterminal for AsCaseAltList *) 
(* AsAltLabelPlusList_%Sublist = 255, Sublist nonterminal for AsAltLabelPlusList *) 
(* AsIfThenPlusList_%Sublist = 256, Sublist nonterminal for AsIfThenPlusList *) 
(* AsTypecaseAltList_%Sublist = 257, Sublist nonterminal for AsTypecaseAltList *) 
(* AsTypePlusList_%Sublist = 258, Sublist nonterminal for AsTypePlusList *) 
(* AsHandlerList_%Sublist = 259, Sublist nonterminal for AsHandlerList *) 
(* AsEqualBindingPlusList_%Sublist = 260, Sublist nonterminal for AsEqualBindingPlusList *) 
(* AsFieldDeclList_%Sublist = 261, Sublist nonterminal for AsFieldDeclList *) 
(* AsMethodList_%Sublist = 262, Sublist nonterminal for AsMethodList *) 
(* AsOverrideList_%Sublist = 263, Sublist nonterminal for AsOverrideList *) 
(* AsConstructorElemList_%Sublist = 264, Sublist nonterminal for AsConstructorElemList *) 
(* AsExprPlusList_%Sublist = 265, Sublist nonterminal for AsExprPlusList *) 
(* AsIdPlusList_%Sublist = 266, Sublist nonterminal for AsIdPlusList *) 
(* AsQualIdList_%Sublist = 267, Sublist nonterminal for AsQualIdList *) 
(* AsQualIdPlusList_%Sublist = 268, Sublist nonterminal for AsQualIdPlusList *) 

(* Classes: *) 
; CONST RwAND = 269 (* Name for "AND" *) 
; CONST RwANY = 270 (* Name for "ANY" *) 
; CONST RwARRAY = 271 (* Name for "ARRAY" *) 
; CONST RwAS = 272 (* Name for "AS" *) 
; CONST RwBEGIN = 273 (* Name for "BEGIN" *) 
; CONST RwBITS = 274 (* Name for "BITS" *) 
; CONST RwBRANDED = 275 (* Name for "BRANDED" *) 
; CONST RwBY = 276 (* Name for "BY" *) 
; CONST RwCASE = 277 (* Name for "CASE" *) 
; CONST RwCONST = 278 (* Name for "CONST" *) 
; CONST RwDIV = 279 (* Name for "DIV" *) 
; CONST RwDO = 280 (* Name for "DO" *) 
; CONST RwELSE = 281 (* Name for "ELSE" *) 
; CONST RwELSIF = 282 (* Name for "ELSIF" *) 
; CONST RwEND = 283 (* Name for "END" *) 
; CONST RwEVAL = 284 (* Name for "EVAL" *) 
; CONST RwEXCEPT = 285 (* Name for "EXCEPT" *) 
; CONST RwEXCEPTION = 286 (* Name for "EXCEPTION" *) 
; CONST RwEXIT = 287 (* Name for "EXIT" *) 
; CONST RwEXPORTS = 288 (* Name for "EXPORTS" *) 
; CONST RwFINALLY = 289 (* Name for "FINALLY" *) 
; CONST RwFOR = 290 (* Name for "FOR" *) 
; CONST RwFROM = 291 (* Name for "FROM" *) 
; CONST RwGENERIC = 292 (* Name for "GENERIC" *) 
; CONST RwIF = 293 (* Name for "IF" *) 
; CONST RwIMPORT = 294 (* Name for "IMPORT" *) 
; CONST RwIN = 295 (* Name for "IN" *) 
; CONST RwINTERFACE = 296 (* Name for "INTERFACE" *) 
; CONST RwLOCK = 297 (* Name for "LOCK" *) 
; CONST RwLOOP = 298 (* Name for "LOOP" *) 
; CONST RwMETHODS = 299 (* Name for "METHODS" *) 
; CONST RwMOD = 300 (* Name for "MOD" *) 
; CONST RwMODULE = 301 (* Name for "MODULE" *) 
; CONST RwNOT = 302 (* Name for "NOT" *) 
; CONST RwOBJECT = 303 (* Name for "OBJECT" *) 
; CONST RwOF = 304 (* Name for "OF" *) 
; CONST RwOR = 305 (* Name for "OR" *) 
; CONST RwOVERRIDES = 306 (* Name for "OVERRIDES" *) 
; CONST RwPROCEDURE = 307 (* Name for "PROCEDURE" *) 
; CONST RwRAISE = 308 (* Name for "RAISE" *) 
; CONST RwRAISES = 309 (* Name for "RAISES" *) 
; CONST RwREADONLY = 310 (* Name for "READONLY" *) 
; CONST RwRECORD = 311 (* Name for "RECORD" *) 
; CONST RwREF = 312 (* Name for "REF" *) 
; CONST RwREPEAT = 313 (* Name for "REPEAT" *) 
; CONST RwRETURN = 314 (* Name for "RETURN" *) 
; CONST RwREVEAL = 315 (* Name for "REVEAL" *) 
; CONST RwROOT = 316 (* Name for "ROOT" *) 
; CONST RwSET = 317 (* Name for "SET" *) 
; CONST RwTHEN = 318 (* Name for "THEN" *) 
; CONST RwTO = 319 (* Name for "TO" *) 
; CONST RwTRY = 320 (* Name for "TRY" *) 
; CONST RwTYPE = 321 (* Name for "TYPE" *) 
; CONST RwTYPECASE = 322 (* Name for "TYPECASE" *) 
; CONST RwUNSAFE = 323 (* Name for "UNSAFE" *) 
; CONST RwUNTIL = 324 (* Name for "UNTIL" *) 
; CONST RwUNTRACED = 325 (* Name for "UNTRACED" *) 
; CONST RwVALUE = 326 (* Name for "VALUE" *) 
; CONST RwVAR = 327 (* Name for "VAR" *) 
; CONST RwWHILE = 328 (* Name for "WHILE" *) 
; CONST RwWITH = 329 (* Name for "WITH" *) 
; CONST Semicolon = 330 (* Name for ";" *) 
; CONST Dot = 331 (* Name for "." *) 
; CONST Equal = 332 (* Name for "=" *) 
; CONST OpenParen = 333 (* Name for "(" *) 
; CONST CloseParen = 334 (* Name for ")" *) 
; CONST Comma = 335 (* Name for "," *) 
; CONST Colon = 336 (* Name for ":" *) 
; CONST Subtype = 337 (* Name for "<:" *) 
; CONST Becomes = 338 (* Name for ":=" *) 
; CONST OpenBrace = 339 (* Name for "{" *) 
; CONST CloseBrace = 340 (* Name for "}" *) 
; CONST Stroke = 341 (* Name for "|" *) 
; CONST Arrow = 342 (* Name for "=>" *) 
; CONST Ellipsis = 343 (* Name for ".." *) 
; CONST OpenBracket = 344 (* Name for "[" *) 
; CONST CloseBracket = 345 (* Name for "]" *) 
; CONST Unequal = 346 (* Name for "#" *) 
; CONST Less = 347 (* Name for "<" *) 
; CONST Greater = 348 (* Name for ">" *) 
; CONST LessEqual = 349 (* Name for "<=" *) 
; CONST GreaterEqual = 350 (* Name for ">=" *) 
; CONST Plus = 351 (* Name for "+" *) 
; CONST Minus = 352 (* Name for "-" *) 
; CONST Ampersand = 353 (* Name for "&" *) 
; CONST Star = 354 (* Name for "*" *) 
; CONST Slash = 355 (* Name for "/" *) 
; CONST Deref = 356 (* Name for "^" *) 
; CONST Compilation = 357
; CONST AsImport = 358
; CONST AsASImportOrList = 359
; CONST AsCsClASImportItem = 360
; CONST AsDecl = 361
; CONST AsConstDeclOrList = 362
; CONST AsTypeDeclOrList = 363
; CONST AsVarDeclOrList = 364
; CONST AsExceptionDeclOrList = 365
; CONST AsRevelationOrList = 366
; CONST AsCsClTypeDecl = 367
; CONST AsCsClProcDecl = 368
; CONST AsCsClRevelation = 369
; CONST AsFormal = 370
; CONST AsRaises = 371
; CONST AsStmt = 372
; CONST AsActual = 373
; CONST AsAltLabel = 374
; CONST AsType = 375
; CONST AsTypeName = 376
; CONST AsSupertype = 377
; CONST AsArrayType = 378
; CONST AsRefType = 379
; CONST AsExpr = 380
; CONST AsE0 = 381
; CONST AsE0OrLess = 382
; CONST AsE1 = 383
; CONST AsE1OrLess = 384
; CONST AsE2 = 385
; CONST AsE2OrLess = 386
; CONST AsE3 = 387
; CONST AsE3OrLess = 388
; CONST AsE4 = 389
; CONST AsE4OrLess = 390
; CONST AsE5 = 391
; CONST AsE5OrLess = 392
; CONST AsE6 = 393
; CONST AsE6OrLess = 394
; CONST AsE7 = 395
; CONST AsE7OrLess = 396
; CONST AsCsClE8 = 397
; CONST AsConstructorElem = 398
; CONST AsQualId = 399

(* Concrete Alternation Tokens: *) 
; CONST CsImport = 400
; CONST AsDeclCs = 401
; CONST CsRaises = 402
; CONST CsActual = 403
; CONST CsActualType = 404
; CONST CsAltLabel = 405
; CONST CsType = 406
; CONST CsTypeName = 407
; CONST CsSupertype = 408
; CONST CsBrand = 409
; CONST G0 = 410
; CONST G1 = 411
; CONST G2 = 412
; CONST G3 = 413
; CONST G4 = 414
; CONST G5 = 415
; CONST G6 = 416
; CONST G7 = 417
; CONST E8Minus = 418
; CONST CsConstructorElem = 419

(* Concrete Plus Tokens: *) 
; CONST CsQualIdPlusList = 420

(* Concrete Plural Tokens: *) 

(* Concrete Star Tokens: *) 
; CONST CsQualIdList = 421

(* Concrete Fixed Tokens: *) 
; CONST CsASImportSingle = 422
; CONST CsASImportPlural = 423
; CONST CsFROMImport = 424
; CONST AsUnsafeCs = 425
; CONST AsConstDeclCs = 426
; CONST AsConstDeclPluralListCs = 427
; CONST AsTypeDeclCs = 428
; CONST AsTypeDeclPluralListCs = 429
; CONST AsRevelationCs = 430
; CONST AsRevelationPluralListCs = 431
; CONST AsExceptionDeclCs = 432
; CONST AsExceptionDeclPluralListCs = 433
; CONST AsVarDeclCs = 434
; CONST AsVarDeclPluralListCs = 435
; CONST CsExpr = 436
; CONST PE0 = 437
; CONST PE1 = 438
; CONST PE2 = 439
; CONST PE3 = 440
; CONST PE4 = 441
; CONST PE5 = 442
; CONST PE6 = 443
; CONST PE7 = 444
; CONST PAsE8 = 445
; CONST G8 = 446
; CONST E0 = 447
; CONST E1 = 448
; CONST E2 = 449
; CONST E3 = 450
; CONST E4 = 451
; CONST E5 = 452
; CONST E6 = 453
; CONST E7 = 454
; CONST CsQualId = 455

(* Limits: *) 
; CONST MinTok = 24
; CONST MaxTok = 455

; PROCEDURE ToText ( Tok : LbeStd . TokTyp ) : TEXT 

; END M3Tok . 

